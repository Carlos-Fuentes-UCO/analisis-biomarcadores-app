{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos-PC\\\\Desktop\\\\TRABAJO\\\\Analisis_Python\\\\AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1\\\\analisis-biomarcadores\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\nconst associationPattern = /\\| Association:(.*?)(?=\\s*\\||$)/;\nconst clinicalSignificancePattern = /\\| ClinicalSignificance:(.*?)(?=\\s*\\||$)/;\n\n/**\r\n * Helper function to dynamically find column indices from a header row.\r\n * @param {string} headerRow The raw header line from the file.\r\n * @param {string[]} columnsToFind An array of column names to search for.\r\n * @returns {Object.<string, number>} An object mapping column names to their 0-based index.\r\n */\nconst getColumnIndices = (headerRow, columnsToFind) => {\n  const headers = headerRow.split('\\t').map(h => h.trim());\n  const indices = {};\n  columnsToFind.forEach(col => {\n    indices[col] = headers.findIndex(h => h.toLowerCase().includes(col.toLowerCase()));\n  });\n  return indices;\n};\nconst App = () => {\n  _s();\n  const [sampleInputs, setSampleInputs] = useState([{\n    id: 1,\n    name: '',\n    sourceSoftware: 'Peaks Studio',\n    files: {\n      peptides: null,\n      proteins: null\n    }\n  }]);\n  const [fastaFile, setFastaFile] = useState(null);\n  const [fastaIds, setFastaIds] = useState(null);\n  const [processedData, setProcessedData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterPathogenic, setFilterPathogenic] = useState(false);\n  const [minTotalPeptides, setMinTotalPeptides] = useState('');\n  const [minArea, setMinArea] = useState('');\n  const [minUniquePeptides, setMinUniquePeptides] = useState('');\n  const [manualFastaIdsText, setManualFastaIdsText] = useState('');\n  const [expandedRow, setExpandedRow] = useState(null);\n  const handleFileChange = (e, id, fileType) => {\n    const file = e.target.files[0];\n    setSampleInputs(prevInputs => prevInputs.map(input => input.id === id ? {\n      ...input,\n      files: {\n        ...input.files,\n        [fileType]: file\n      }\n    } : input));\n  };\n  const handleNameChange = (e, id) => {\n    const {\n      value\n    } = e.target;\n    setSampleInputs(prevInputs => prevInputs.map(input => input.id === id ? {\n      ...input,\n      name: value\n    } : input));\n  };\n  const addSampleInput = () => {\n    const newId = sampleInputs.length ? Math.max(...sampleInputs.map(s => s.id)) + 1 : 1;\n    setSampleInputs([...sampleInputs, {\n      id: newId,\n      name: '',\n      sourceSoftware: 'Peaks Studio',\n      files: {\n        peptides: null,\n        proteins: null\n      }\n    }]);\n  };\n  const handleRemoveInput = id => {\n    if (sampleInputs.length > 1) {\n      setSampleInputs(sampleInputs.filter(input => input.id !== id));\n    }\n  };\n  const processData = useCallback(async () => {\n    setError(null);\n    setLoading(true);\n    setProcessedData([]);\n    setFastaIds(null);\n    try {\n      let parsedFastaIds = null;\n      if (fastaFile) {\n        const fastaText = await fastaFile.text();\n        const ids = new Set();\n        const lines = fastaText.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('>')) {\n            const parts = line.substring(1).split('|');\n            if (parts.length > 1) {\n              ids.add(parts[1].trim());\n            } else {\n              ids.add(parts[0].trim());\n            }\n          }\n        }\n        parsedFastaIds = ids;\n      }\n      const parsedManualIds = new Set();\n      if (manualFastaIdsText.trim()) {\n        const idsArray = manualFastaIdsText.split(/[\\s,;]+/).map(id => id.trim()).filter(id => id.length > 0);\n        idsArray.forEach(id => parsedManualIds.add(id));\n      }\n      let combinedFastaIds = null;\n      if (parsedFastaIds || parsedManualIds.size > 0) {\n        combinedFastaIds = new Set();\n        if (parsedFastaIds) {\n          parsedFastaIds.forEach(id => combinedFastaIds.add(id));\n        }\n        if (parsedManualIds.size > 0) {\n          parsedManualIds.forEach(id => combinedFastaIds.add(id));\n        }\n      }\n      setFastaIds(combinedFastaIds);\n      const allProteins = [];\n      const allPeptides = new Map();\n      const groupCounts = new Map();\n      for (const sample of sampleInputs) {\n        if (!sample.name || !sample.files.peptides || !sample.files.proteins) {\n          setError(`Falta información para la muestra ${sample.id}. Asegúrese de que el nombre y ambos archivos están cargados.`);\n          setLoading(false);\n          return;\n        }\n        const peptidesText = await sample.files.peptides.text();\n        const proteinsText = await sample.files.proteins.text();\n        const peptidesLines = peptidesText.split('\\n').filter(line => line.trim() !== '');\n        const proteinsLines = proteinsText.split('\\n').filter(line => line.trim() !== '');\n        if (peptidesLines.length < 2 || proteinsLines.length < 2) {\n          setError(`Error: Los archivos de la muestra ${sample.name} están vacíos o el formato es incorrecto.`);\n          setLoading(false);\n          return;\n        }\n        const proteinsHeader = proteinsLines[0];\n        const peptidesHeader = peptidesLines[0];\n\n        // Dynamically find column indices from headers\n        const proteinsIndices = getColumnIndices(proteinsHeader, ['Accession', 'Protein Group', 'Area', '#Peptides', 'Description']);\n        const peptidesIndices = getColumnIndices(peptidesHeader, ['Protein Accession', 'Peptide', 'Unique']);\n\n        // Ensure all necessary columns were found\n        if (Object.values(proteinsIndices).some(idx => idx === -1)) {\n          console.error('Proteins file missing required columns:', proteinsIndices);\n          setError(`Error: El archivo de proteínas de la muestra '${sample.name}' no contiene todas las columnas requeridas. Por favor, asegúrese de que incluye 'Accession', 'Protein Group', 'Area', '#Peptides' y 'Description'.`);\n          setLoading(false);\n          return;\n        }\n        if (Object.values(peptidesIndices).some(idx => idx === -1)) {\n          console.error('Peptides file missing required columns:', peptidesIndices);\n          setError(`Error: El archivo de péptidos de la muestra '${sample.name}' no contiene todas las columnas requeridas. Por favor, asegúrese de que incluye 'Protein Accession' y 'Peptide'.`);\n          setLoading(false);\n          return;\n        }\n\n        // Parse peptides file first to build the unique peptide map\n        peptidesLines.slice(1).forEach(row => {\n          const columns = row.split('\\t');\n          const peptideSequence = columns[peptidesIndices['Peptide']] || 'N/A';\n          const proteinAccessionFull = columns[peptidesIndices['Protein Accession']] || '';\n          const proteinAccession = proteinAccessionFull.split('|').length > 1 ? proteinAccessionFull.split('|')[1] : proteinAccessionFull;\n          if (proteinAccession) {\n            const peptideId = `${sample.name}-${proteinAccession}`;\n            if (!allPeptides.has(peptideId)) {\n              allPeptides.set(peptideId, new Set());\n            }\n            allPeptides.get(peptideId).add(peptideSequence);\n          }\n        });\n\n        // Then parse proteins file\n        const proteins = proteinsLines.slice(1).map(row => {\n          const columns = row.split('\\t');\n          // Use the dynamic indices for parsing\n          const accessionFull = columns[proteinsIndices['Accession']] || '';\n          const accession = accessionFull.split('|').length > 1 ? accessionFull.split('|')[1] : accessionFull;\n          const proteinGroup = columns[proteinsIndices['Protein Group']] || 'N/A';\n          const area = parseFloat(columns[proteinsIndices['Area']]) || 0;\n          const totalPeptides = parseInt(columns[proteinsIndices['#Peptides']], 10) || 0;\n          const description = columns[proteinsIndices['Description']].replace(/\"/g, '').trim();\n          let diseaseAssociation = 'N/A';\n          const associationMatch = description.match(associationPattern);\n          const clinicalSignificanceMatch = description.match(clinicalSignificancePattern);\n          const associations = [];\n          if (associationMatch && associationMatch[1]) {\n            associations.push(associationMatch[1].trim());\n          }\n          if (clinicalSignificanceMatch && clinicalSignificanceMatch[1]) {\n            associations.push(clinicalSignificanceMatch[1].trim());\n          }\n          if (associations.length > 0) {\n            diseaseAssociation = associations.join('; ');\n          } else {\n            if (description.match(pathogenicPattern)) {\n              diseaseAssociation = 'Patogénico/Variante';\n            }\n            if (description.toLowerCase().includes('cancer')) {\n              diseaseAssociation = 'Cáncer';\n            }\n          }\n          const uniquePeptidesForProtein = Array.from(allPeptides.get(`${sample.name}-${accession}`) || []);\n          const uniquePeptidesCount = uniquePeptidesForProtein.length;\n          return {\n            accession,\n            description,\n            proteinGroup,\n            area,\n            totalPeptides,\n            uniquePeptidesCount,\n            uniquePeptides: uniquePeptidesForProtein,\n            sampleName: sample.name,\n            diseaseAssociation\n          };\n        });\n        allProteins.push(...proteins);\n      }\n      allProteins.forEach(protein => {\n        groupCounts.set(protein.proteinGroup, (groupCounts.get(protein.proteinGroup) || 0) + 1);\n      });\n      const finalProteins = allProteins.map(protein => ({\n        ...protein,\n        isUnitaryGroup: groupCounts.get(protein.proteinGroup) === 1\n      }));\n      setProcessedData(finalProteins);\n    } catch (err) {\n      console.error('Error procesando los archivos:', err);\n      setError(`Error procesando los archivos. Por favor, asegúrese de que el formato es correcto. Detalles: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [sampleInputs, fastaFile, manualFastaIdsText]);\n  const filteredData = useMemo(() => {\n    let currentData = processedData;\n    if (fastaIds && fastaIds.size > 0) {\n      currentData = currentData.filter(protein => {\n        const baseAccession = protein.accession.split('-')[0];\n        return fastaIds.has(baseAccession);\n      });\n    }\n    if (filterPathogenic) {\n      currentData = currentData.filter(protein => protein.diseaseAssociation.includes('Patogénico/Variante') || protein.diseaseAssociation.includes('PATHOGENIC_VARIANT'));\n    }\n    const parsedMinTotalPeptides = parseInt(minTotalPeptides, 10);\n    if (!isNaN(parsedMinTotalPeptides)) {\n      currentData = currentData.filter(protein => protein.totalPeptides >= parsedMinTotalPeptides);\n    }\n    const parsedMinArea = parseFloat(minArea);\n    if (!isNaN(parsedMinArea)) {\n      currentData = currentData.filter(protein => protein.area >= parsedMinArea);\n    }\n    const parsedMinUniquePeptides = parseInt(minUniquePeptides, 10);\n    if (!isNaN(parsedMinUniquePeptides)) {\n      currentData = currentData.filter(protein => protein.uniquePeptidesCount >= parsedMinUniquePeptides);\n    }\n    return currentData.filter(protein => protein.accession.toLowerCase().includes(searchTerm.toLowerCase()) || protein.description.toLowerCase().includes(searchTerm.toLowerCase()));\n  }, [processedData, fastaIds, searchTerm, filterPathogenic, minTotalPeptides, minArea, minUniquePeptides]);\n  const toggleRow = index => {\n    setExpandedRow(expandedRow === index ? null : index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"An\\xE1lisis de Biomarcadores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Unifica, analiza y visualiza datos de prote\\xEDnas y p\\xE9ptidos.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Paso 1: Opcional - Filtrar por IDs de Prote\\xEDnas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Sube tu archivo FASTA:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".fasta,.txt\",\n          onChange: e => setFastaFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), fastaFile && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Archivo seleccionado: \", fastaFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"O introduce IDs manualmente (separados por coma o espacio):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"4\",\n          value: manualFastaIdsText,\n          onChange: e => setManualFastaIdsText(e.target.value),\n          placeholder: \"Ej: P01234, Q56789\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Paso 2: Cargar Archivos de Muestras\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-input-group\",\n        children: [sampleInputs.map(sample => {\n          var _sample$files$peptide, _sample$files$protein;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              border: '1px solid #eee',\n              padding: '10px',\n              borderRadius: '4px',\n              position: 'relative'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: sample.name,\n              onChange: e => handleNameChange(e, sample.id),\n              placeholder: `Nombre de Muestra ${sample.id}`,\n              style: {\n                width: 'calc(100% - 20px)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".txt\",\n              onChange: e => handleFileChange(e, sample.id, 'peptides')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"Archivo de P\\xE9ptidos: \", ((_sample$files$peptide = sample.files.peptides) === null || _sample$files$peptide === void 0 ? void 0 : _sample$files$peptide.name) || 'No seleccionado']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".txt\",\n              onChange: e => handleFileChange(e, sample.id, 'proteins')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"Archivo de Prote\\xEDnas: \", ((_sample$files$protein = sample.files.proteins) === null || _sample$files$protein === void 0 ? void 0 : _sample$files$protein.name) || 'No seleccionado']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this), sampleInputs.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRemoveInput(sample.id),\n              style: {\n                position: 'absolute',\n                top: '5px',\n                right: '5px',\n                background: 'none',\n                border: 'none',\n                color: 'red',\n                cursor: 'pointer'\n              },\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this)]\n          }, sample.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: addSampleInput,\n            children: \"A\\xF1adir Otra Muestra\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: processData,\n            disabled: loading,\n            children: loading ? 'Procesando...' : 'Analizar Archivos'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }, this), processedData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Paso 3: Resultados y Filtros\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Buscar...\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginLeft: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: filterPathogenic,\n            onChange: e => setFilterPathogenic(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 19\n          }, this), \"Mostrar solo Patog\\xE9nicos\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px',\n          display: 'flex',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"M\\xEDn. P\\xE9ptidos Totales\",\n          value: minTotalPeptides,\n          onChange: e => setMinTotalPeptides(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          placeholder: \"M\\xEDn. \\xC1rea\",\n          value: minArea,\n          onChange: e => setMinArea(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"M\\xEDn. P\\xE9ptidos \\xDAnicos\",\n          value: minUniquePeptides,\n          onChange: e => setMinUniquePeptides(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"results-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID de Acceso\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descripci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Muestra\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Asociaci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Grupo Unitario\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\xC1rea\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"P\\xE9ptidos Totales\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"P\\xE9ptidos \\xDAnicos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Acciones\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredData.map((protein, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.accession\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.sampleName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.diseaseAssociation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.isUnitaryGroup ? 'Sí' : 'No'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.area.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.totalPeptides\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: protein.uniquePeptidesCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => toggleRow(index),\n                  children: expandedRow === index ? 'Cerrar' : 'Ver Péptidos'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 19\n            }, this), expandedRow === index && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"P\\xE9ptidos \\xDAnicos:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"peptide-list\",\n                  children: protein.uniquePeptides.length > 0 ? protein.uniquePeptides.map((peptide, pIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: peptide\n                  }, pIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 31\n                  }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"No hay p\\xE9ptidos \\xFAnicos asociados.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RFIxcSdT3ye2F2AUOXO8fffrsi4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","jsxDEV","_jsxDEV","pathogenicPattern","associationPattern","clinicalSignificancePattern","getColumnIndices","headerRow","columnsToFind","headers","split","map","h","trim","indices","forEach","col","findIndex","toLowerCase","includes","App","_s","sampleInputs","setSampleInputs","id","name","sourceSoftware","files","peptides","proteins","fastaFile","setFastaFile","fastaIds","setFastaIds","processedData","setProcessedData","error","setError","loading","setLoading","searchTerm","setSearchTerm","filterPathogenic","setFilterPathogenic","minTotalPeptides","setMinTotalPeptides","minArea","setMinArea","minUniquePeptides","setMinUniquePeptides","manualFastaIdsText","setManualFastaIdsText","expandedRow","setExpandedRow","handleFileChange","e","fileType","file","target","prevInputs","input","handleNameChange","value","addSampleInput","newId","length","Math","max","s","handleRemoveInput","filter","processData","parsedFastaIds","fastaText","text","ids","Set","lines","line","startsWith","parts","substring","add","parsedManualIds","idsArray","combinedFastaIds","size","allProteins","allPeptides","Map","groupCounts","sample","peptidesText","proteinsText","peptidesLines","proteinsLines","proteinsHeader","peptidesHeader","proteinsIndices","peptidesIndices","Object","values","some","idx","console","slice","row","columns","peptideSequence","proteinAccessionFull","proteinAccession","peptideId","has","set","get","accessionFull","accession","proteinGroup","area","parseFloat","totalPeptides","parseInt","description","replace","diseaseAssociation","associationMatch","match","clinicalSignificanceMatch","associations","push","join","uniquePeptidesForProtein","Array","from","uniquePeptidesCount","uniquePeptides","sampleName","protein","finalProteins","isUnitaryGroup","err","message","filteredData","currentData","baseAccession","parsedMinTotalPeptides","isNaN","parsedMinArea","parsedMinUniquePeptides","toggleRow","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","marginTop","rows","placeholder","_sample$files$peptide","_sample$files$protein","border","padding","borderRadius","position","width","onClick","top","right","background","color","cursor","display","gap","disabled","marginBottom","marginLeft","checked","step","Fragment","toFixed","colSpan","fontWeight","peptide","pIndex","_c","$RefreshReg$"],"sources":["C:/Users/Carlos-PC/Desktop/TRABAJO/Analisis_Python/AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1/analisis-biomarcadores/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\r\n\r\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\r\nconst associationPattern = /\\| Association:(.*?)(?=\\s*\\||$)/;\r\nconst clinicalSignificancePattern = /\\| ClinicalSignificance:(.*?)(?=\\s*\\||$)/;\r\n\r\n/**\r\n * Helper function to dynamically find column indices from a header row.\r\n * @param {string} headerRow The raw header line from the file.\r\n * @param {string[]} columnsToFind An array of column names to search for.\r\n * @returns {Object.<string, number>} An object mapping column names to their 0-based index.\r\n */\r\nconst getColumnIndices = (headerRow, columnsToFind) => {\r\n  const headers = headerRow.split('\\t').map(h => h.trim());\r\n  const indices = {};\r\n  columnsToFind.forEach(col => {\r\n    indices[col] = headers.findIndex(h => h.toLowerCase().includes(col.toLowerCase()));\r\n  });\r\n  return indices;\r\n};\r\n\r\nconst App = () => {\r\n  const [sampleInputs, setSampleInputs] = useState([{ id: 1, name: '', sourceSoftware: 'Peaks Studio', files: { peptides: null, proteins: null } }]);\r\n  const [fastaFile, setFastaFile] = useState(null);\r\n  const [fastaIds, setFastaIds] = useState(null);\r\n  const [processedData, setProcessedData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterPathogenic, setFilterPathogenic] = useState(false);\r\n  const [minTotalPeptides, setMinTotalPeptides] = useState('');\r\n  const [minArea, setMinArea] = useState('');\r\n  const [minUniquePeptides, setMinUniquePeptides] = useState('');\r\n  const [manualFastaIdsText, setManualFastaIdsText] = useState('');\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n\r\n  const handleFileChange = (e, id, fileType) => {\r\n    const file = e.target.files[0];\r\n    setSampleInputs(prevInputs => prevInputs.map(input =>\r\n      input.id === id ? { ...input, files: { ...input.files, [fileType]: file } } : input\r\n    ));\r\n  };\r\n\r\n  const handleNameChange = (e, id) => {\r\n    const { value } = e.target;\r\n    setSampleInputs(prevInputs => prevInputs.map(input =>\r\n      input.id === id ? { ...input, name: value } : input\r\n    ));\r\n  };\r\n\r\n  const addSampleInput = () => {\r\n    const newId = sampleInputs.length ? Math.max(...sampleInputs.map(s => s.id)) + 1 : 1;\r\n    setSampleInputs([...sampleInputs, { id: newId, name: '', sourceSoftware: 'Peaks Studio', files: { peptides: null, proteins: null } }]);\r\n  };\r\n\r\n  const handleRemoveInput = (id) => {\r\n    if (sampleInputs.length > 1) {\r\n      setSampleInputs(sampleInputs.filter(input => input.id !== id));\r\n    }\r\n  };\r\n\r\n  const processData = useCallback(async () => {\r\n    setError(null);\r\n    setLoading(true);\r\n    setProcessedData([]);\r\n    setFastaIds(null);\r\n\r\n    try {\r\n      let parsedFastaIds = null;\r\n      if (fastaFile) {\r\n        const fastaText = await fastaFile.text();\r\n        const ids = new Set();\r\n        const lines = fastaText.split('\\n');\r\n        for (const line of lines) {\r\n          if (line.startsWith('>')) {\r\n            const parts = line.substring(1).split('|');\r\n            if (parts.length > 1) {\r\n              ids.add(parts[1].trim());\r\n            } else {\r\n              ids.add(parts[0].trim());\r\n            }\r\n          }\r\n        }\r\n        parsedFastaIds = ids;\r\n      }\r\n\r\n      const parsedManualIds = new Set();\r\n      if (manualFastaIdsText.trim()) {\r\n        const idsArray = manualFastaIdsText.split(/[\\s,;]+/).map(id => id.trim()).filter(id => id.length > 0);\r\n        idsArray.forEach(id => parsedManualIds.add(id));\r\n      }\r\n\r\n      let combinedFastaIds = null;\r\n      if (parsedFastaIds || parsedManualIds.size > 0) {\r\n        combinedFastaIds = new Set();\r\n        if (parsedFastaIds) {\r\n          parsedFastaIds.forEach(id => combinedFastaIds.add(id));\r\n        }\r\n        if (parsedManualIds.size > 0) {\r\n          parsedManualIds.forEach(id => combinedFastaIds.add(id));\r\n        }\r\n      }\r\n      setFastaIds(combinedFastaIds);\r\n      \r\n      const allProteins = [];\r\n      const allPeptides = new Map();\r\n      const groupCounts = new Map();\r\n\r\n      for (const sample of sampleInputs) {\r\n        if (!sample.name || !sample.files.peptides || !sample.files.proteins) {\r\n          setError(`Falta información para la muestra ${sample.id}. Asegúrese de que el nombre y ambos archivos están cargados.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const peptidesText = await sample.files.peptides.text();\r\n        const proteinsText = await sample.files.proteins.text();\r\n\r\n        const peptidesLines = peptidesText.split('\\n').filter(line => line.trim() !== '');\r\n        const proteinsLines = proteinsText.split('\\n').filter(line => line.trim() !== '');\r\n\r\n        if (peptidesLines.length < 2 || proteinsLines.length < 2) {\r\n          setError(`Error: Los archivos de la muestra ${sample.name} están vacíos o el formato es incorrecto.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const proteinsHeader = proteinsLines[0];\r\n        const peptidesHeader = peptidesLines[0];\r\n\r\n        // Dynamically find column indices from headers\r\n        const proteinsIndices = getColumnIndices(proteinsHeader, ['Accession', 'Protein Group', 'Area', '#Peptides', 'Description']);\r\n        const peptidesIndices = getColumnIndices(peptidesHeader, ['Protein Accession', 'Peptide', 'Unique']);\r\n        \r\n        // Ensure all necessary columns were found\r\n        if (Object.values(proteinsIndices).some(idx => idx === -1)) {\r\n          console.error('Proteins file missing required columns:', proteinsIndices);\r\n          setError(`Error: El archivo de proteínas de la muestra '${sample.name}' no contiene todas las columnas requeridas. Por favor, asegúrese de que incluye 'Accession', 'Protein Group', 'Area', '#Peptides' y 'Description'.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        if (Object.values(peptidesIndices).some(idx => idx === -1)) {\r\n          console.error('Peptides file missing required columns:', peptidesIndices);\r\n          setError(`Error: El archivo de péptidos de la muestra '${sample.name}' no contiene todas las columnas requeridas. Por favor, asegúrese de que incluye 'Protein Accession' y 'Peptide'.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Parse peptides file first to build the unique peptide map\r\n        peptidesLines.slice(1).forEach(row => {\r\n          const columns = row.split('\\t');\r\n          const peptideSequence = columns[peptidesIndices['Peptide']] || 'N/A';\r\n          const proteinAccessionFull = columns[peptidesIndices['Protein Accession']] || '';\r\n          const proteinAccession = proteinAccessionFull.split('|').length > 1 ? proteinAccessionFull.split('|')[1] : proteinAccessionFull;\r\n\r\n          if (proteinAccession) {\r\n            const peptideId = `${sample.name}-${proteinAccession}`;\r\n            if (!allPeptides.has(peptideId)) {\r\n                allPeptides.set(peptideId, new Set());\r\n            }\r\n            allPeptides.get(peptideId).add(peptideSequence);\r\n          }\r\n        });\r\n\r\n        // Then parse proteins file\r\n        const proteins = proteinsLines.slice(1).map(row => {\r\n          const columns = row.split('\\t');\r\n          // Use the dynamic indices for parsing\r\n          const accessionFull = columns[proteinsIndices['Accession']] || '';\r\n          const accession = accessionFull.split('|').length > 1 ? accessionFull.split('|')[1] : accessionFull;\r\n          const proteinGroup = columns[proteinsIndices['Protein Group']] || 'N/A';\r\n          const area = parseFloat(columns[proteinsIndices['Area']]) || 0;\r\n          const totalPeptides = parseInt(columns[proteinsIndices['#Peptides']], 10) || 0;\r\n          const description = columns[proteinsIndices['Description']].replace(/\"/g, '').trim();\r\n          \r\n          let diseaseAssociation = 'N/A';\r\n          \r\n          const associationMatch = description.match(associationPattern);\r\n          const clinicalSignificanceMatch = description.match(clinicalSignificancePattern);\r\n\r\n          const associations = [];\r\n          if (associationMatch && associationMatch[1]) {\r\n              associations.push(associationMatch[1].trim());\r\n          }\r\n          if (clinicalSignificanceMatch && clinicalSignificanceMatch[1]) {\r\n              associations.push(clinicalSignificanceMatch[1].trim());\r\n          }\r\n          \r\n          if (associations.length > 0) {\r\n              diseaseAssociation = associations.join('; ');\r\n          } else {\r\n              if (description.match(pathogenicPattern)) {\r\n                  diseaseAssociation = 'Patogénico/Variante';\r\n              }\r\n              if (description.toLowerCase().includes('cancer')) {\r\n                  diseaseAssociation = 'Cáncer';\r\n              }\r\n          }\r\n\r\n          const uniquePeptidesForProtein = Array.from(allPeptides.get(`${sample.name}-${accession}`) || []);\r\n          const uniquePeptidesCount = uniquePeptidesForProtein.length;\r\n\r\n          return {\r\n            accession,\r\n            description,\r\n            proteinGroup,\r\n            area,\r\n            totalPeptides,\r\n            uniquePeptidesCount,\r\n            uniquePeptides: uniquePeptidesForProtein,\r\n            sampleName: sample.name,\r\n            diseaseAssociation\r\n          };\r\n        });\r\n\r\n        allProteins.push(...proteins);\r\n      }\r\n\r\n      allProteins.forEach(protein => {\r\n          groupCounts.set(protein.proteinGroup, (groupCounts.get(protein.proteinGroup) || 0) + 1);\r\n      });\r\n\r\n      const finalProteins = allProteins.map(protein => ({\r\n          ...protein,\r\n          isUnitaryGroup: groupCounts.get(protein.proteinGroup) === 1\r\n      }));\r\n\r\n      setProcessedData(finalProteins);\r\n\r\n    } catch (err) {\r\n      console.error('Error procesando los archivos:', err);\r\n      setError(`Error procesando los archivos. Por favor, asegúrese de que el formato es correcto. Detalles: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [sampleInputs, fastaFile, manualFastaIdsText]);\r\n\r\n  const filteredData = useMemo(() => {\r\n    let currentData = processedData;\r\n\r\n    if (fastaIds && fastaIds.size > 0) {\r\n        currentData = currentData.filter(protein => {\r\n          const baseAccession = protein.accession.split('-')[0];\r\n          return fastaIds.has(baseAccession);\r\n        });\r\n    }\r\n    \r\n    if (filterPathogenic) {\r\n        currentData = currentData.filter(protein => protein.diseaseAssociation.includes('Patogénico/Variante') || protein.diseaseAssociation.includes('PATHOGENIC_VARIANT'));\r\n    }\r\n\r\n    const parsedMinTotalPeptides = parseInt(minTotalPeptides, 10);\r\n    if (!isNaN(parsedMinTotalPeptides)) {\r\n        currentData = currentData.filter(protein => protein.totalPeptides >= parsedMinTotalPeptides);\r\n    }\r\n    \r\n    const parsedMinArea = parseFloat(minArea);\r\n    if (!isNaN(parsedMinArea)) {\r\n        currentData = currentData.filter(protein => protein.area >= parsedMinArea);\r\n    }\r\n    \r\n    const parsedMinUniquePeptides = parseInt(minUniquePeptides, 10);\r\n    if (!isNaN(parsedMinUniquePeptides)) {\r\n        currentData = currentData.filter(protein => protein.uniquePeptidesCount >= parsedMinUniquePeptides);\r\n    }\r\n\r\n    return currentData.filter(protein =>\r\n      protein.accession.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      protein.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  }, [processedData, fastaIds, searchTerm, filterPathogenic, minTotalPeptides, minArea, minUniquePeptides]);\r\n\r\n  const toggleRow = (index) => {\r\n    setExpandedRow(expandedRow === index ? null : index);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <header className=\"header\">\r\n        <h1>Análisis de Biomarcadores</h1>\r\n        <p>Unifica, analiza y visualiza datos de proteínas y péptidos.</p>\r\n      </header>\r\n\r\n      <div className=\"section\">\r\n        <h2>Paso 1: Opcional - Filtrar por IDs de Proteínas</h2>\r\n        <div>\r\n          <label>Sube tu archivo FASTA:</label>\r\n          <input type=\"file\" accept=\".fasta,.txt\" onChange={(e) => setFastaFile(e.target.files[0])} />\r\n          {fastaFile && <p>Archivo seleccionado: {fastaFile.name}</p>}\r\n        </div>\r\n        <div style={{ marginTop: '10px' }}>\r\n          <label>O introduce IDs manualmente (separados por coma o espacio):</label>\r\n          <textarea rows=\"4\" value={manualFastaIdsText} onChange={(e) => setManualFastaIdsText(e.target.value)} placeholder=\"Ej: P01234, Q56789\"></textarea>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"section\">\r\n        <h2>Paso 2: Cargar Archivos de Muestras</h2>\r\n        <div className=\"file-input-group\">\r\n          {sampleInputs.map((sample) => (\r\n            <div key={sample.id} style={{ border: '1px solid #eee', padding: '10px', borderRadius: '4px', position: 'relative' }}>\r\n              <input type=\"text\" value={sample.name} onChange={(e) => handleNameChange(e, sample.id)} placeholder={`Nombre de Muestra ${sample.id}`} style={{ width: 'calc(100% - 20px)' }} />\r\n              <input type=\"file\" accept=\".txt\" onChange={(e) => handleFileChange(e, sample.id, 'peptides')} />\r\n              <small>Archivo de Péptidos: {sample.files.peptides?.name || 'No seleccionado'}</small>\r\n              <input type=\"file\" accept=\".txt\" onChange={(e) => handleFileChange(e, sample.id, 'proteins')} />\r\n              <small>Archivo de Proteínas: {sample.files.proteins?.name || 'No seleccionado'}</small>\r\n              {sampleInputs.length > 1 && (\r\n                <button onClick={() => handleRemoveInput(sample.id)} style={{ position: 'absolute', top: '5px', right: '5px', background: 'none', border: 'none', color: 'red', cursor: 'pointer' }}>X</button>\r\n              )}\r\n            </div>\r\n          ))}\r\n          <div style={{ display: 'flex', gap: '10px' }}>\r\n              <button className=\"btn btn-secondary\" onClick={addSampleInput}>Añadir Otra Muestra</button>\r\n              <button className=\"btn btn-primary\" onClick={processData} disabled={loading}>{loading ? 'Procesando...' : 'Analizar Archivos'}</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {error && <div className=\"error\">{error}</div>}\r\n\r\n      {processedData.length > 0 && (\r\n        <div className=\"section\">\r\n          <h2>Paso 3: Resultados y Filtros</h2>\r\n          <div style={{ marginBottom: '10px' }}>\r\n              <input type=\"text\" placeholder=\"Buscar...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />\r\n              <label style={{ marginLeft: '10px' }}>\r\n                  <input type=\"checkbox\" checked={filterPathogenic} onChange={(e) => setFilterPathogenic(e.target.checked)} />\r\n                  Mostrar solo Patogénicos\r\n              </label>\r\n          </div>\r\n          <div style={{ marginBottom: '10px', display: 'flex', gap: '10px' }}>\r\n              <input type=\"number\" placeholder=\"Mín. Péptidos Totales\" value={minTotalPeptides} onChange={(e) => setMinTotalPeptides(e.target.value)} />\r\n              <input type=\"number\" step=\"0.01\" placeholder=\"Mín. Área\" value={minArea} onChange={(e) => setMinArea(e.target.value)} />\r\n              <input type=\"number\" placeholder=\"Mín. Péptidos Únicos\" value={minUniquePeptides} onChange={(e) => setMinUniquePeptides(e.target.value)} />\r\n          </div>\r\n          <table className=\"results-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID de Acceso</th>\r\n                <th>Descripción</th>\r\n                <th>Muestra</th>\r\n                <th>Asociación</th>\r\n                <th>Grupo Unitario</th>\r\n                <th>Área</th>\r\n                <th>Péptidos Totales</th>\r\n                <th>Péptidos Únicos</th>\r\n                <th>Acciones</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredData.map((protein, index) => (\r\n                <React.Fragment key={index}>\r\n                  <tr>\r\n                    <td>{protein.accession}</td>\r\n                    <td>{protein.description}</td>\r\n                    <td>{protein.sampleName}</td>\r\n                    <td>{protein.diseaseAssociation}</td>\r\n                    <td>{protein.isUnitaryGroup ? 'Sí' : 'No'}</td>\r\n                    <td>{protein.area.toFixed(2)}</td>\r\n                    <td>{protein.totalPeptides}</td>\r\n                    <td>{protein.uniquePeptidesCount}</td>\r\n                    <td>\r\n                      <button onClick={() => toggleRow(index)}>\r\n                        {expandedRow === index ? 'Cerrar' : 'Ver Péptidos'}\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  {expandedRow === index && (\r\n                    <tr>\r\n                      <td colSpan=\"9\">\r\n                        <h4 style={{ fontWeight: 'bold' }}>Péptidos Únicos:</h4>\r\n                        <ul className=\"peptide-list\">\r\n                          {protein.uniquePeptides.length > 0 ? (\r\n                            protein.uniquePeptides.map((peptide, pIndex) => (\r\n                              <li key={pIndex}>{peptide}</li>\r\n                            ))\r\n                          ) : (\r\n                            <li>No hay péptidos únicos asociados.</li>\r\n                          )}\r\n                        </ul>\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </React.Fragment>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n        \r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}