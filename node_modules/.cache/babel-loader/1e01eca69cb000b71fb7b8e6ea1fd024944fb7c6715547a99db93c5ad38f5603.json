{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos-PC\\\\Desktop\\\\TRABAJO\\\\Analisis_Python\\\\AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1\\\\analisis-biomarcadores\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useMemo } from 'react';\n\n// Regular expressions to find pathogenic variants and associations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\nconst associationPattern = /\\| Association:(.*?)(?=\\s*\\||$)/;\nconst clinicalSignificancePattern = /\\| ClinicalSignificance:(.*?)(?=\\s*\\||$)/;\n\n/**\r\n * Helper function to dynamically find column indices from the header row.\r\n * @param {string} headerRow The raw header line from the file.\r\n * @param {string[]} columnsToFind An array of column names to find.\r\n * @returns {Object.<string, number>} An object mapping column names to their 0-based index.\r\n */\nconst getColumnIndices = (headerRow, columnsToFind) => {\n  const headers = headerRow.split('\\t').map(h => h.replace(/\"/g, '').trim().toLowerCase());\n  const indices = {};\n  columnsToFind.forEach(col => {\n    indices[col] = headers.findIndex(h => h.includes(col.toLowerCase()));\n  });\n  return indices;\n};\n\n/**\r\n * A robust line parser that handles tabs within double-quoted fields.\r\n * @param {string} line The raw line from the file.\r\n * @returns {string[]} An array of columns.\r\n */\nconst parseLine = line => {\n  // Regex to split by tab, but only if the tab is not inside double quotes.\n  const regex = /\\t(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n  return line.split(regex).map(col => col.replace(/\"/g, '').trim());\n};\nconst App = () => {\n  _s();\n  const [sampleInputs, setSampleInputs] = useState([{\n    id: 1,\n    name: '',\n    sourceSoftware: 'Peaks Studio',\n    files: {\n      peptides: null,\n      proteins: null\n    }\n  }]);\n  const [fastaFile, setFastaFile] = useState(null);\n  const [fastaIds, setFastaIds] = useState(null);\n  const [processedData, setProcessedData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [minTotalPeptides, setMinTotalPeptides] = useState('');\n  const [minArea, setMinArea] = useState('');\n  const [minUniquePeptides, setMinUniquePeptides] = useState('');\n  const [manualFastaIdsText, setManualFastaIdsText] = useState('');\n  const [expandedRow, setExpandedRow] = useState(null);\n  const [showUnitaryGroupsOnly, setShowUnitaryGroupsOnly] = useState(false);\n  const handleFileChange = (e, id, fileType) => {\n    const file = e.target.files[0];\n    setSampleInputs(prevInputs => prevInputs.map(input => input.id === id ? {\n      ...input,\n      files: {\n        ...input.files,\n        [fileType]: file\n      }\n    } : input));\n  };\n  const handleNameChange = (e, id) => {\n    const {\n      value\n    } = e.target;\n    setSampleInputs(prevInputs => prevInputs.map(input => input.id === id ? {\n      ...input,\n      name: value\n    } : input));\n  };\n  const addSampleInput = () => {\n    const newId = sampleInputs.length ? Math.max(...sampleInputs.map(s => s.id)) + 1 : 1;\n    setSampleInputs([...sampleInputs, {\n      id: newId,\n      name: '',\n      sourceSoftware: 'Peaks Studio',\n      files: {\n        peptides: null,\n        proteins: null\n      }\n    }]);\n  };\n  const handleRemoveInput = id => {\n    if (sampleInputs.length > 1) {\n      setSampleInputs(sampleInputs.filter(input => input.id !== id));\n    }\n  };\n  const processData = useCallback(async () => {\n    setError(null);\n    setLoading(true);\n    setProcessedData([]);\n    setFastaIds(null);\n    try {\n      let parsedFastaIds = null;\n      if (fastaFile) {\n        const fastaText = await fastaFile.text();\n        const ids = new Set();\n        const lines = fastaText.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('>')) {\n            const parts = line.substring(1).split('|');\n            if (parts.length > 1) {\n              ids.add(parts[1].trim());\n            } else {\n              ids.add(parts[0].trim());\n            }\n          }\n        }\n        parsedFastaIds = ids;\n      }\n      const parsedManualIds = new Set();\n      if (manualFastaIdsText.trim()) {\n        const idsArray = manualFastaIdsText.split(/[\\s,;]+/).map(id => id.trim()).filter(id => id.length > 0);\n        idsArray.forEach(id => parsedManualIds.add(id));\n      }\n      let combinedFastaIds = null;\n      if (parsedFastaIds || parsedManualIds.size > 0) {\n        combinedFastaIds = new Set();\n        if (parsedFastaIds) {\n          parsedFastaIds.forEach(id => combinedFastaIds.add(id));\n        }\n        if (parsedManualIds.size > 0) {\n          parsedManualIds.forEach(id => combinedFastaIds.add(id));\n        }\n      }\n      setFastaIds(combinedFastaIds);\n      const allProteins = [];\n      const allPeptides = new Map();\n      const sampleGroupCounts = new Map();\n      for (const sample of sampleInputs) {\n        if (!sample.name || !sample.files.peptides || !sample.files.proteins) {\n          setError(`Missing information for sample ${sample.id}. Ensure the name and both files are uploaded.`);\n          setLoading(false);\n          return;\n        }\n        const peptidesText = await sample.files.peptides.text();\n        const proteinsText = await sample.files.proteins.text();\n        const peptidesLines = peptidesText.split('\\n').filter(line => line.trim() !== '');\n        const proteinsLines = proteinsText.split('\\n').filter(line => line.trim() !== '');\n        if (peptidesLines.length < 2 || proteinsLines.length < 2) {\n          setError(`Error: Files for sample ${sample.name} are empty or the format is incorrect.`);\n          setLoading(false);\n          return;\n        }\n        const proteinsHeader = proteinsLines[0];\n        const peptidesHeader = peptidesLines[0];\n        const proteinsIndices = getColumnIndices(proteinsHeader, ['Accession', 'Protein Group', 'Area', '#Peptides', 'Description']);\n        const peptidesIndices = getColumnIndices(peptidesHeader, ['Protein Accession', 'Peptide']);\n        const missingProteinsCols = Object.entries(proteinsIndices).filter(([key, val]) => val === -1).map(([key]) => key);\n        if (missingProteinsCols.length > 0) {\n          setError(`Error: Protein file for sample '${sample.name}' does not contain the required columns: ${missingProteinsCols.join(', ')}.`);\n          setLoading(false);\n          return;\n        }\n        const missingPeptidesCols = Object.entries(peptidesIndices).filter(([key, val]) => val === -1).map(([key]) => key);\n        if (missingPeptidesCols.length > 0) {\n          setError(`Error: Peptide file for sample '${sample.name}' does not contain the required columns: ${missingPeptidesCols.join(', ')}.`);\n          setLoading(false);\n          return;\n        }\n        peptidesLines.slice(1).forEach(row => {\n          const columns = row.split('\\t');\n          const peptideSequence = columns[peptidesIndices['Peptide']] || 'N/A';\n          const proteinAccessionFull = columns[peptidesIndices['Protein Accession']] || '';\n          const proteinAccession = proteinAccessionFull.split('|').length > 1 ? proteinAccessionFull.split('|')[1] : proteinAccessionFull;\n          if (proteinAccession) {\n            const peptideId = `${sample.name}-${proteinAccession}`;\n            if (!allPeptides.has(peptideId)) {\n              allPeptides.set(peptideId, new Set());\n            }\n            allPeptides.get(peptideId).add(peptideSequence);\n          }\n        });\n        const parsedProteinsForThisSample = [];\n        proteinsLines.slice(1).forEach(row => {\n          const columns = parseLine(row);\n          const accessionFull = columns[proteinsIndices['Accession']] || '';\n          const accession = accessionFull.split('|').length > 1 ? accessionFull.split('|')[1] : accessionFull;\n          const proteinGroup = columns[proteinsIndices['Protein Group']] || 'N/A';\n          const area = parseFloat(columns[proteinsIndices['Area']]) || 0;\n          const totalPeptides = parseInt(columns[proteinsIndices['#Peptides']], 10) || 0;\n          const description = (columns[proteinsIndices['Description']] || '').replace(/\"/g, '').trim();\n          let diseaseAssociation = 'N/A';\n          const associationMatch = description.match(associationPattern);\n          const clinicalSignificanceMatch = description.match(clinicalSignificancePattern);\n          const associations = [];\n          if (associationMatch && associationMatch[1]) {\n            associations.push(associationMatch[1].trim());\n          }\n          if (clinicalSignificanceMatch && clinicalSignificanceMatch[1]) {\n            associations.push(clinicalSignificanceMatch[1].trim());\n          }\n          if (associations.length > 0) {\n            diseaseAssociation = associations.join('; ');\n          } else if (description.toUpperCase().includes('PATHOGENIC_VARIANT')) {\n            diseaseAssociation = 'PATHOGENIC_VARIANT';\n          } else if (description.match(pathogenicPattern)) {\n            diseaseAssociation = 'Pathogenic/Variant';\n          } else if (description.toLowerCase().includes('cancer')) {\n            diseaseAssociation = 'Cancer';\n          }\n          const uniquePeptidesForProtein = Array.from(allPeptides.get(`${sample.name}-${accession}`) || []);\n          const uniquePeptidesCount = uniquePeptidesForProtein.length;\n          parsedProteinsForThisSample.push({\n            accession,\n            description,\n            proteinGroup,\n            area,\n            totalPeptides,\n            uniquePeptidesCount,\n            uniquePeptides: uniquePeptidesForProtein,\n            sampleName: sample.name,\n            diseaseAssociation\n          });\n        });\n\n        // Count protein groups per sample\n        if (!sampleGroupCounts.has(sample.name)) {\n          sampleGroupCounts.set(sample.name, new Map());\n        }\n        const currentSampleCounts = sampleGroupCounts.get(sample.name);\n        parsedProteinsForThisSample.forEach(protein => {\n          currentSampleCounts.set(protein.proteinGroup, (currentSampleCounts.get(protein.proteinGroup) || 0) + 1);\n        });\n        allProteins.push(...parsedProteinsForThisSample);\n      }\n      const finalProteins = allProteins.map(protein => {\n        var _sampleGroupCounts$ge;\n        return {\n          ...protein,\n          // Now we check the specific sample's group count\n          isUnitaryGroup: ((_sampleGroupCounts$ge = sampleGroupCounts.get(protein.sampleName)) === null || _sampleGroupCounts$ge === void 0 ? void 0 : _sampleGroupCounts$ge.get(protein.proteinGroup)) === 1\n        };\n      });\n      setProcessedData(finalProteins);\n    } catch (err) {\n      console.error('Error processing files:', err);\n      setError(`Error processing files. Please ensure the format is correct. Details: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [sampleInputs, fastaFile, manualFastaIdsText]);\n  const filteredData = useMemo(() => {\n    let currentData = processedData;\n    if (fastaIds && fastaIds.size > 0) {\n      currentData = currentData.filter(protein => {\n        const baseAccession = protein.accession.split('-')[0];\n        return fastaIds.has(baseAccession);\n      });\n    }\n    const parsedMinTotalPeptides = parseInt(minTotalPeptides, 10);\n    if (!isNaN(parsedMinTotalPeptides)) {\n      currentData = currentData.filter(protein => protein.totalPeptides >= parsedMinTotalPeptides);\n    }\n    const parsedMinArea = parseFloat(minArea);\n    if (!isNaN(parsedMinArea)) {\n      currentData = currentData.filter(protein => protein.area >= parsedMinArea);\n    }\n    const parsedMinUniquePeptides = parseInt(minUniquePeptides, 10);\n    if (!isNaN(parsedMinUniquePeptides)) {\n      currentData = currentData.filter(protein => protein.uniquePeptidesCount >= parsedMinUniquePeptides);\n    }\n    if (showUnitaryGroupsOnly) {\n      currentData = currentData.filter(protein => protein.isUnitaryGroup);\n    }\n    return currentData.filter(protein => protein.accession.toLowerCase().includes(searchTerm.toLowerCase()) || protein.description.toLowerCase().includes(searchTerm.toLowerCase()));\n  }, [processedData, fastaIds, searchTerm, minTotalPeptides, minArea, minUniquePeptides, showUnitaryGroupsOnly]);\n  const toggleRow = index => {\n    setExpandedRow(expandedRow === index ? null : index);\n  };\n  const handleExportToTxt = () => {\n    if (filteredData.length === 0) {\n      setError('No data to export. Please ensure the table contains results.');\n      return;\n    }\n\n    // Define the headers for the output file\n    const headers = ['Accession ID', 'Description', 'Sample', 'Association', 'Unitary Group', 'Area', 'Total Peptides', 'Unique Peptides'];\n\n    // Map the filtered data to a tab-separated string\n    const rows = filteredData.map(protein => {\n      return [protein.accession, protein.description, protein.sampleName, protein.diseaseAssociation, protein.isUnitaryGroup ? 'Yes' : 'No', protein.area.toFixed(2), protein.totalPeptides, protein.uniquePeptidesCount].join('\\t');\n    });\n\n    // Combine headers and rows\n    const fileContent = [headers.join('\\t'), ...rows].join('\\n');\n\n    // Create a Blob and download it\n    const blob = new Blob([fileContent], {\n      type: 'text/plain;charset=utf-8'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'filtered_proteins.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen py-8 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 max-w-7xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"text-center mb-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-bold text-gray-800 mb-2\",\n          children: \"Pathogenic Variants Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg text-gray-600\",\n          children: \"Unify, analyze, and visualize protein and peptide data from different samples.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-xl shadow-lg mb-8 border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold text-gray-700 mb-4\",\n          children: \"Step 1: Optional - Filter by Protein IDs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-gray-600 font-medium mb-2\",\n              children: \"Upload your FASTA file:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".fasta,.txt\",\n              onChange: e => setFastaFile(e.target.files[0]),\n              className: \"text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 transition duration-200\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), fastaFile && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 text-sm text-gray-500\",\n              children: [\"File selected: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium text-gray-700\",\n                children: fastaFile.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 86\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-gray-600 font-medium mb-2\",\n              children: \"Or enter IDs manually (comma or space separated):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              rows: \"4\",\n              value: manualFastaIdsText,\n              onChange: e => setManualFastaIdsText(e.target.value),\n              placeholder: \"e.g. P01234, Q56789\",\n              className: \"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 resize-none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-xl shadow-lg mb-8 border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold text-gray-700 mb-4\",\n          children: \"Step 2: Upload Sample Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-6\",\n          children: sampleInputs.map(sample => {\n            var _sample$files$peptide, _sample$files$protein;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"relative p-4 border border-gray-300 rounded-lg bg-gray-50 flex flex-col space-y-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: sample.name,\n                onChange: e => handleNameChange(e, sample.id),\n                placeholder: `Sample Name ${sample.id}`,\n                className: \"p-2 border border-gray-300 rounded-lg text-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex flex-col md:flex-row md:space-x-4 space-y-3 md:space-y-0\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex-1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"block text-gray-600 text-sm mb-1\",\n                    children: \"Peptide File:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    accept: \".txt\",\n                    onChange: e => handleFileChange(e, sample.id, 'peptides'),\n                    className: \"text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-gray-200 hover:file:bg-gray-300 transition duration-200 w-full\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 362,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"mt-1 block text-gray-500 text-xs truncate\",\n                    children: ((_sample$files$peptide = sample.files.peptides) === null || _sample$files$peptide === void 0 ? void 0 : _sample$files$peptide.name) || 'Not selected'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex-1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"block text-gray-600 text-sm mb-1\",\n                    children: \"Protein File:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    accept: \".txt\",\n                    onChange: e => handleFileChange(e, sample.id, 'proteins'),\n                    className: \"text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-gray-200 hover:file:bg-gray-300 transition duration-200 w-full\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                    className: \"mt-1 block text-gray-500 text-xs truncate\",\n                    children: ((_sample$files$protein = sample.files.proteins) === null || _sample$files$protein === void 0 ? void 0 : _sample$files$protein.name) || 'Not selected'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this), sampleInputs.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRemoveInput(sample.id),\n                className: \"absolute top-2 right-2 text-red-500 hover:text-red-700 transition duration-200 rounded-full w-6 h-6 flex items-center justify-center\",\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  className: \"h-4 w-4\",\n                  viewBox: \"0 0 20 20\",\n                  fill: \"currentColor\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    fillRule: \"evenodd\",\n                    d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n                    clipRule: \"evenodd\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this)]\n            }, sample.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-4 mt-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addSampleInput,\n            className: \"bg-gray-200 text-gray-700 font-semibold py-2 px-6 rounded-full shadow-md hover:bg-gray-300 transition duration-200 ease-in-out transform hover:scale-105\",\n            children: \"Add Another Sample\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: processData,\n            disabled: loading,\n            className: \"bg-blue-600 text-white font-semibold py-2 px-6 rounded-full shadow-lg hover:bg-blue-700 transition duration-200 ease-in-out transform hover:scale-105 disabled:bg-blue-400\",\n            children: loading ? 'Processing...' : 'Analyze Files'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-500 text-white p-4 rounded-lg shadow-md mb-8\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 19\n      }, this), processedData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-xl shadow-lg border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold text-gray-700 mb-4\",\n          children: \"Step 3: Results and Filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value),\n            className: \"col-span-1 md:col-span-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Min. Total Peptides\",\n            value: minTotalPeptides,\n            onChange: e => setMinTotalPeptides(e.target.value),\n            className: \"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            step: \"0.01\",\n            placeholder: \"Min. Area\",\n            value: minArea,\n            onChange: e => setMinArea(e.target.value),\n            className: \"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Min. Unique Peptides\",\n            value: minUniquePeptides,\n            onChange: e => setMinUniquePeptides(e.target.value),\n            className: \"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center col-span-1 md:col-span-2 lg:col-span-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"unitary-group-filter\",\n              type: \"checkbox\",\n              checked: showUnitaryGroupsOnly,\n              onChange: e => setShowUnitaryGroupsOnly(e.target.checked),\n              className: \"h-4 w-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"unitary-group-filter\",\n              className: \"ml-2 text-gray-600 font-medium cursor-pointer\",\n              children: \"Only Unitary Groups\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleExportToTxt,\n            className: \"col-span-1 md:col-span-2 lg:col-span-1 bg-green-600 text-white font-semibold py-3 px-6 rounded-full shadow-lg hover:bg-green-700 transition duration-200 ease-in-out transform hover:scale-105\",\n            children: \"Export to TXT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto rounded-lg shadow-md\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"min-w-full bg-white border-collapse\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"bg-gray-200 text-gray-700 uppercase text-sm leading-normal\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Accession ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Sample\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Association\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Unitary Group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Area\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Total Peptides\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Unique Peptides\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"py-3 px-6 text-left\",\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              className: \"text-gray-600 text-sm font-light\",\n              children: filteredData.map((protein, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: \"border-b border-gray-200 hover:bg-gray-100 transition duration-200\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6 whitespace-nowrap\",\n                    children: protein.accession\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.sampleName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 440,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.diseaseAssociation\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.isUnitaryGroup ? 'Yes' : 'No'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.area.toFixed(2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.totalPeptides\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 444,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: protein.uniquePeptidesCount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 445,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"py-3 px-6\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => toggleRow(index),\n                      className: \"bg-blue-500 text-white py-1 px-3 rounded-full text-xs hover:bg-blue-600 transition duration-200\",\n                      children: expandedRow === index ? 'Close' : 'View Peptides'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 23\n                }, this), expandedRow === index && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: \"bg-gray-50 border-b border-gray-200\",\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"9\",\n                    className: \"p-4\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      className: \"text-sm font-bold text-gray-700 mb-2\",\n                      children: \"Unique Peptides:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 455,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                      className: \"list-disc list-inside space-y-1 text-sm text-gray-600\",\n                      children: protein.uniquePeptides.length > 0 ? protein.uniquePeptides.map((peptide, pIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        children: peptide\n                      }, pIndex, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 459,\n                        columnNumber: 35\n                      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                        children: \"No unique peptides associated.\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 462,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 456,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 454,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"L2+uCt8gVyPsCEsNETdsFOe3S5s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","jsxDEV","_jsxDEV","pathogenicPattern","associationPattern","clinicalSignificancePattern","getColumnIndices","headerRow","columnsToFind","headers","split","map","h","replace","trim","toLowerCase","indices","forEach","col","findIndex","includes","parseLine","line","regex","App","_s","sampleInputs","setSampleInputs","id","name","sourceSoftware","files","peptides","proteins","fastaFile","setFastaFile","fastaIds","setFastaIds","processedData","setProcessedData","error","setError","loading","setLoading","searchTerm","setSearchTerm","minTotalPeptides","setMinTotalPeptides","minArea","setMinArea","minUniquePeptides","setMinUniquePeptides","manualFastaIdsText","setManualFastaIdsText","expandedRow","setExpandedRow","showUnitaryGroupsOnly","setShowUnitaryGroupsOnly","handleFileChange","e","fileType","file","target","prevInputs","input","handleNameChange","value","addSampleInput","newId","length","Math","max","s","handleRemoveInput","filter","processData","parsedFastaIds","fastaText","text","ids","Set","lines","startsWith","parts","substring","add","parsedManualIds","idsArray","combinedFastaIds","size","allProteins","allPeptides","Map","sampleGroupCounts","sample","peptidesText","proteinsText","peptidesLines","proteinsLines","proteinsHeader","peptidesHeader","proteinsIndices","peptidesIndices","missingProteinsCols","Object","entries","key","val","join","missingPeptidesCols","slice","row","columns","peptideSequence","proteinAccessionFull","proteinAccession","peptideId","has","set","get","parsedProteinsForThisSample","accessionFull","accession","proteinGroup","area","parseFloat","totalPeptides","parseInt","description","diseaseAssociation","associationMatch","match","clinicalSignificanceMatch","associations","push","toUpperCase","uniquePeptidesForProtein","Array","from","uniquePeptidesCount","uniquePeptides","sampleName","currentSampleCounts","protein","finalProteins","_sampleGroupCounts$ge","isUnitaryGroup","err","console","message","filteredData","currentData","baseAccession","parsedMinTotalPeptides","isNaN","parsedMinArea","parsedMinUniquePeptides","toggleRow","index","handleExportToTxt","rows","toFixed","fileContent","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","placeholder","_sample$files$peptide","_sample$files$protein","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","disabled","step","checked","htmlFor","Fragment","colSpan","peptide","pIndex","_c","$RefreshReg$"],"sources":["C:/Users/Carlos-PC/Desktop/TRABAJO/Analisis_Python/AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1/analisis-biomarcadores/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\r\n\r\n// Regular expressions to find pathogenic variants and associations\r\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\r\nconst associationPattern = /\\| Association:(.*?)(?=\\s*\\||$)/;\r\nconst clinicalSignificancePattern = /\\| ClinicalSignificance:(.*?)(?=\\s*\\||$)/;\r\n\r\n/**\r\n * Helper function to dynamically find column indices from the header row.\r\n * @param {string} headerRow The raw header line from the file.\r\n * @param {string[]} columnsToFind An array of column names to find.\r\n * @returns {Object.<string, number>} An object mapping column names to their 0-based index.\r\n */\r\nconst getColumnIndices = (headerRow, columnsToFind) => {\r\n  const headers = headerRow.split('\\t').map(h => h.replace(/\"/g, '').trim().toLowerCase());\r\n  const indices = {};\r\n  columnsToFind.forEach(col => {\r\n    indices[col] = headers.findIndex(h => h.includes(col.toLowerCase()));\r\n  });\r\n  return indices;\r\n};\r\n\r\n/**\r\n * A robust line parser that handles tabs within double-quoted fields.\r\n * @param {string} line The raw line from the file.\r\n * @returns {string[]} An array of columns.\r\n */\r\nconst parseLine = (line) => {\r\n  // Regex to split by tab, but only if the tab is not inside double quotes.\r\n  const regex = /\\t(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\r\n  return line.split(regex).map(col => col.replace(/\"/g, '').trim());\r\n};\r\n\r\nconst App = () => {\r\n  const [sampleInputs, setSampleInputs] = useState([{ id: 1, name: '', sourceSoftware: 'Peaks Studio', files: { peptides: null, proteins: null } }]);\r\n  const [fastaFile, setFastaFile] = useState(null);\r\n  const [fastaIds, setFastaIds] = useState(null);\r\n  const [processedData, setProcessedData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [minTotalPeptides, setMinTotalPeptides] = useState('');\r\n  const [minArea, setMinArea] = useState('');\r\n  const [minUniquePeptides, setMinUniquePeptides] = useState('');\r\n  const [manualFastaIdsText, setManualFastaIdsText] = useState('');\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n  const [showUnitaryGroupsOnly, setShowUnitaryGroupsOnly] = useState(false);\r\n\r\n  const handleFileChange = (e, id, fileType) => {\r\n    const file = e.target.files[0];\r\n    setSampleInputs(prevInputs => prevInputs.map(input =>\r\n      input.id === id ? { ...input, files: { ...input.files, [fileType]: file } } : input\r\n    ));\r\n  };\r\n\r\n  const handleNameChange = (e, id) => {\r\n    const { value } = e.target;\r\n    setSampleInputs(prevInputs => prevInputs.map(input =>\r\n      input.id === id ? { ...input, name: value } : input\r\n    ));\r\n  };\r\n\r\n  const addSampleInput = () => {\r\n    const newId = sampleInputs.length ? Math.max(...sampleInputs.map(s => s.id)) + 1 : 1;\r\n    setSampleInputs([...sampleInputs, { id: newId, name: '', sourceSoftware: 'Peaks Studio', files: { peptides: null, proteins: null } }]);\r\n  };\r\n\r\n  const handleRemoveInput = (id) => {\r\n    if (sampleInputs.length > 1) {\r\n      setSampleInputs(sampleInputs.filter(input => input.id !== id));\r\n    }\r\n  };\r\n\r\n  const processData = useCallback(async () => {\r\n    setError(null);\r\n    setLoading(true);\r\n    setProcessedData([]);\r\n    setFastaIds(null);\r\n\r\n    try {\r\n      let parsedFastaIds = null;\r\n      if (fastaFile) {\r\n        const fastaText = await fastaFile.text();\r\n        const ids = new Set();\r\n        const lines = fastaText.split('\\n');\r\n        for (const line of lines) {\r\n          if (line.startsWith('>')) {\r\n            const parts = line.substring(1).split('|');\r\n            if (parts.length > 1) {\r\n              ids.add(parts[1].trim());\r\n            } else {\r\n              ids.add(parts[0].trim());\r\n            }\r\n          }\r\n        }\r\n        parsedFastaIds = ids;\r\n      }\r\n\r\n      const parsedManualIds = new Set();\r\n      if (manualFastaIdsText.trim()) {\r\n        const idsArray = manualFastaIdsText.split(/[\\s,;]+/).map(id => id.trim()).filter(id => id.length > 0);\r\n        idsArray.forEach(id => parsedManualIds.add(id));\r\n      }\r\n\r\n      let combinedFastaIds = null;\r\n      if (parsedFastaIds || parsedManualIds.size > 0) {\r\n        combinedFastaIds = new Set();\r\n        if (parsedFastaIds) {\r\n          parsedFastaIds.forEach(id => combinedFastaIds.add(id));\r\n        }\r\n        if (parsedManualIds.size > 0) {\r\n          parsedManualIds.forEach(id => combinedFastaIds.add(id));\r\n        }\r\n      }\r\n      setFastaIds(combinedFastaIds);\r\n      \r\n      const allProteins = [];\r\n      const allPeptides = new Map();\r\n      const sampleGroupCounts = new Map();\r\n\r\n      for (const sample of sampleInputs) {\r\n        if (!sample.name || !sample.files.peptides || !sample.files.proteins) {\r\n          setError(`Missing information for sample ${sample.id}. Ensure the name and both files are uploaded.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const peptidesText = await sample.files.peptides.text();\r\n        const proteinsText = await sample.files.proteins.text();\r\n\r\n        const peptidesLines = peptidesText.split('\\n').filter(line => line.trim() !== '');\r\n        const proteinsLines = proteinsText.split('\\n').filter(line => line.trim() !== '');\r\n\r\n        if (peptidesLines.length < 2 || proteinsLines.length < 2) {\r\n          setError(`Error: Files for sample ${sample.name} are empty or the format is incorrect.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const proteinsHeader = proteinsLines[0];\r\n        const peptidesHeader = peptidesLines[0];\r\n\r\n        const proteinsIndices = getColumnIndices(proteinsHeader, ['Accession', 'Protein Group', 'Area', '#Peptides', 'Description']);\r\n        const peptidesIndices = getColumnIndices(peptidesHeader, ['Protein Accession', 'Peptide']);\r\n        \r\n        const missingProteinsCols = Object.entries(proteinsIndices).filter(([key, val]) => val === -1).map(([key]) => key);\r\n        if (missingProteinsCols.length > 0) {\r\n          setError(`Error: Protein file for sample '${sample.name}' does not contain the required columns: ${missingProteinsCols.join(', ')}.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const missingPeptidesCols = Object.entries(peptidesIndices).filter(([key, val]) => val === -1).map(([key]) => key);\r\n        if (missingPeptidesCols.length > 0) {\r\n          setError(`Error: Peptide file for sample '${sample.name}' does not contain the required columns: ${missingPeptidesCols.join(', ')}.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        peptidesLines.slice(1).forEach(row => {\r\n          const columns = row.split('\\t');\r\n          const peptideSequence = columns[peptidesIndices['Peptide']] || 'N/A';\r\n          const proteinAccessionFull = columns[peptidesIndices['Protein Accession']] || '';\r\n          const proteinAccession = proteinAccessionFull.split('|').length > 1 ? proteinAccessionFull.split('|')[1] : proteinAccessionFull;\r\n\r\n          if (proteinAccession) {\r\n            const peptideId = `${sample.name}-${proteinAccession}`;\r\n            if (!allPeptides.has(peptideId)) {\r\n                allPeptides.set(peptideId, new Set());\r\n            }\r\n            allPeptides.get(peptideId).add(peptideSequence);\r\n          }\r\n        });\r\n\r\n        const parsedProteinsForThisSample = [];\r\n        proteinsLines.slice(1).forEach(row => {\r\n            const columns = parseLine(row);\r\n            const accessionFull = columns[proteinsIndices['Accession']] || '';\r\n            const accession = accessionFull.split('|').length > 1 ? accessionFull.split('|')[1] : accessionFull;\r\n            const proteinGroup = columns[proteinsIndices['Protein Group']] || 'N/A';\r\n            const area = parseFloat(columns[proteinsIndices['Area']]) || 0;\r\n            const totalPeptides = parseInt(columns[proteinsIndices['#Peptides']], 10) || 0;\r\n            \r\n            const description = (columns[proteinsIndices['Description']] || '').replace(/\"/g, '').trim();\r\n            \r\n            let diseaseAssociation = 'N/A';\r\n            const associationMatch = description.match(associationPattern);\r\n            const clinicalSignificanceMatch = description.match(clinicalSignificancePattern);\r\n            const associations = [];\r\n            if (associationMatch && associationMatch[1]) {\r\n                associations.push(associationMatch[1].trim());\r\n            }\r\n            if (clinicalSignificanceMatch && clinicalSignificanceMatch[1]) {\r\n                associations.push(clinicalSignificanceMatch[1].trim());\r\n            }\r\n            if (associations.length > 0) {\r\n                diseaseAssociation = associations.join('; ');\r\n            } else if (description.toUpperCase().includes('PATHOGENIC_VARIANT')) {\r\n                diseaseAssociation = 'PATHOGENIC_VARIANT';\r\n            } else if (description.match(pathogenicPattern)) {\r\n                diseaseAssociation = 'Pathogenic/Variant';\r\n            } else if (description.toLowerCase().includes('cancer')) {\r\n                diseaseAssociation = 'Cancer';\r\n            }\r\n  \r\n            const uniquePeptidesForProtein = Array.from(allPeptides.get(`${sample.name}-${accession}`) || []);\r\n            const uniquePeptidesCount = uniquePeptidesForProtein.length;\r\n  \r\n            parsedProteinsForThisSample.push({\r\n              accession,\r\n              description,\r\n              proteinGroup,\r\n              area,\r\n              totalPeptides,\r\n              uniquePeptidesCount,\r\n              uniquePeptides: uniquePeptidesForProtein,\r\n              sampleName: sample.name,\r\n              diseaseAssociation\r\n            });\r\n        });\r\n\r\n        // Count protein groups per sample\r\n        if (!sampleGroupCounts.has(sample.name)) {\r\n            sampleGroupCounts.set(sample.name, new Map());\r\n        }\r\n        const currentSampleCounts = sampleGroupCounts.get(sample.name);\r\n        parsedProteinsForThisSample.forEach(protein => {\r\n            currentSampleCounts.set(protein.proteinGroup, (currentSampleCounts.get(protein.proteinGroup) || 0) + 1);\r\n        });\r\n\r\n        allProteins.push(...parsedProteinsForThisSample);\r\n      }\r\n      \r\n      const finalProteins = allProteins.map(protein => ({\r\n          ...protein,\r\n          // Now we check the specific sample's group count\r\n          isUnitaryGroup: sampleGroupCounts.get(protein.sampleName)?.get(protein.proteinGroup) === 1\r\n      }));\r\n\r\n      setProcessedData(finalProteins);\r\n\r\n    } catch (err) {\r\n      console.error('Error processing files:', err);\r\n      setError(`Error processing files. Please ensure the format is correct. Details: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [sampleInputs, fastaFile, manualFastaIdsText]);\r\n\r\n  const filteredData = useMemo(() => {\r\n    let currentData = processedData;\r\n\r\n    if (fastaIds && fastaIds.size > 0) {\r\n        currentData = currentData.filter(protein => {\r\n          const baseAccession = protein.accession.split('-')[0];\r\n          return fastaIds.has(baseAccession);\r\n        });\r\n    }\r\n    \r\n    const parsedMinTotalPeptides = parseInt(minTotalPeptides, 10);\r\n    if (!isNaN(parsedMinTotalPeptides)) {\r\n        currentData = currentData.filter(protein => protein.totalPeptides >= parsedMinTotalPeptides);\r\n    }\r\n    \r\n    const parsedMinArea = parseFloat(minArea);\r\n    if (!isNaN(parsedMinArea)) {\r\n        currentData = currentData.filter(protein => protein.area >= parsedMinArea);\r\n    }\r\n    \r\n    const parsedMinUniquePeptides = parseInt(minUniquePeptides, 10);\r\n    if (!isNaN(parsedMinUniquePeptides)) {\r\n        currentData = currentData.filter(protein => protein.uniquePeptidesCount >= parsedMinUniquePeptides);\r\n    }\r\n\r\n    if (showUnitaryGroupsOnly) {\r\n        currentData = currentData.filter(protein => protein.isUnitaryGroup);\r\n    }\r\n\r\n    return currentData.filter(protein =>\r\n      protein.accession.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      protein.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  }, [processedData, fastaIds, searchTerm, minTotalPeptides, minArea, minUniquePeptides, showUnitaryGroupsOnly]);\r\n\r\n  const toggleRow = (index) => {\r\n    setExpandedRow(expandedRow === index ? null : index);\r\n  };\r\n  \r\n  const handleExportToTxt = () => {\r\n    if (filteredData.length === 0) {\r\n      setError('No data to export. Please ensure the table contains results.');\r\n      return;\r\n    }\r\n  \r\n    // Define the headers for the output file\r\n    const headers = ['Accession ID', 'Description', 'Sample', 'Association', 'Unitary Group', 'Area', 'Total Peptides', 'Unique Peptides'];\r\n    \r\n    // Map the filtered data to a tab-separated string\r\n    const rows = filteredData.map(protein => {\r\n      return [\r\n        protein.accession,\r\n        protein.description,\r\n        protein.sampleName,\r\n        protein.diseaseAssociation,\r\n        protein.isUnitaryGroup ? 'Yes' : 'No',\r\n        protein.area.toFixed(2),\r\n        protein.totalPeptides,\r\n        protein.uniquePeptidesCount,\r\n      ].join('\\t');\r\n    });\r\n  \r\n    // Combine headers and rows\r\n    const fileContent = [headers.join('\\t'), ...rows].join('\\n');\r\n    \r\n    // Create a Blob and download it\r\n    const blob = new Blob([fileContent], { type: 'text/plain;charset=utf-8' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'filtered_proteins.txt';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen py-8 font-sans\">\r\n      <div className=\"container mx-auto px-4 max-w-7xl\">\r\n        {/* Header */}\r\n        <header className=\"text-center mb-12\">\r\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Pathogenic Variants Analysis</h1>\r\n          <p className=\"text-lg text-gray-600\">Unify, analyze, and visualize protein and peptide data from different samples.</p>\r\n        </header>\r\n\r\n        {/* FASTA Upload Section */}\r\n        <div className=\"bg-white p-6 rounded-xl shadow-lg mb-8 border border-gray-200\">\r\n          <h2 className=\"text-2xl font-semibold text-gray-700 mb-4\">Step 1: Optional - Filter by Protein IDs</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"flex flex-col\">\r\n              <label className=\"text-gray-600 font-medium mb-2\">Upload your FASTA file:</label>\r\n              <input type=\"file\" accept=\".fasta,.txt\" onChange={(e) => setFastaFile(e.target.files[0])} className=\"text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 transition duration-200\" />\r\n              {fastaFile && <p className=\"mt-2 text-sm text-gray-500\">File selected: <span className=\"font-medium text-gray-700\">{fastaFile.name}</span></p>}\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <label className=\"text-gray-600 font-medium mb-2\">Or enter IDs manually (comma or space separated):</label>\r\n              <textarea rows=\"4\" value={manualFastaIdsText} onChange={(e) => setManualFastaIdsText(e.target.value)} placeholder=\"e.g. P01234, Q56789\" className=\"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 resize-none\"></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sample File Upload Section */}\r\n        <div className=\"bg-white p-6 rounded-xl shadow-lg mb-8 border border-gray-200\">\r\n          <h2 className=\"text-2xl font-semibold text-gray-700 mb-4\">Step 2: Upload Sample Files</h2>\r\n          <div className=\"space-y-6\">\r\n            {sampleInputs.map((sample) => (\r\n              <div key={sample.id} className=\"relative p-4 border border-gray-300 rounded-lg bg-gray-50 flex flex-col space-y-3\">\r\n                <input type=\"text\" value={sample.name} onChange={(e) => handleNameChange(e, sample.id)} placeholder={`Sample Name ${sample.id}`} className=\"p-2 border border-gray-300 rounded-lg text-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\" />\r\n                <div className=\"flex flex-col md:flex-row md:space-x-4 space-y-3 md:space-y-0\">\r\n                  <div className=\"flex-1\">\r\n                    <label className=\"block text-gray-600 text-sm mb-1\">Peptide File:</label>\r\n                    <input type=\"file\" accept=\".txt\" onChange={(e) => handleFileChange(e, sample.id, 'peptides')} className=\"text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-gray-200 hover:file:bg-gray-300 transition duration-200 w-full\" />\r\n                    <small className=\"mt-1 block text-gray-500 text-xs truncate\">{sample.files.peptides?.name || 'Not selected'}</small>\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <label className=\"block text-gray-600 text-sm mb-1\">Protein File:</label>\r\n                    <input type=\"file\" accept=\".txt\" onChange={(e) => handleFileChange(e, sample.id, 'proteins')} className=\"text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-gray-200 hover:file:bg-gray-300 transition duration-200 w-full\" />\r\n                    <small className=\"mt-1 block text-gray-500 text-xs truncate\">{sample.files.proteins?.name || 'Not selected'}</small>\r\n                  </div>\r\n                </div>\r\n                {sampleInputs.length > 1 && (\r\n                  <button onClick={() => handleRemoveInput(sample.id)} className=\"absolute top-2 right-2 text-red-500 hover:text-red-700 transition duration-200 rounded-full w-6 h-6 flex items-center justify-center\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  </button>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"flex space-x-4 mt-6\">\r\n            <button onClick={addSampleInput} className=\"bg-gray-200 text-gray-700 font-semibold py-2 px-6 rounded-full shadow-md hover:bg-gray-300 transition duration-200 ease-in-out transform hover:scale-105\">\r\n              Add Another Sample\r\n            </button>\r\n            <button onClick={processData} disabled={loading} className=\"bg-blue-600 text-white font-semibold py-2 px-6 rounded-full shadow-lg hover:bg-blue-700 transition duration-200 ease-in-out transform hover:scale-105 disabled:bg-blue-400\">\r\n              {loading ? 'Processing...' : 'Analyze Files'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {error && <div className=\"bg-red-500 text-white p-4 rounded-lg shadow-md mb-8\">{error}</div>}\r\n\r\n        {/* Results Section */}\r\n        {processedData.length > 0 && (\r\n          <div className=\"bg-white p-6 rounded-xl shadow-lg border border-gray-200\">\r\n            <h2 className=\"text-2xl font-semibold text-gray-700 mb-4\">Step 3: Results and Filters</h2>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n              <input type=\"text\" placeholder=\"Search...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className=\"col-span-1 md:col-span-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\" />\r\n              <input type=\"number\" placeholder=\"Min. Total Peptides\" value={minTotalPeptides} onChange={(e) => setMinTotalPeptides(e.target.value)} className=\"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\" />\r\n              <input type=\"number\" step=\"0.01\" placeholder=\"Min. Area\" value={minArea} onChange={(e) => setMinArea(e.target.value)} className=\"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\" />\r\n              <input type=\"number\" placeholder=\"Min. Unique Peptides\" value={minUniquePeptides} onChange={(e) => setMinUniquePeptides(e.target.value)} className=\"p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200\" />\r\n              <div className=\"flex items-center col-span-1 md:col-span-2 lg:col-span-1\">\r\n                <input\r\n                  id=\"unitary-group-filter\"\r\n                  type=\"checkbox\"\r\n                  checked={showUnitaryGroupsOnly}\r\n                  onChange={(e) => setShowUnitaryGroupsOnly(e.target.checked)}\r\n                  className=\"h-4 w-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500\"\r\n                />\r\n                <label htmlFor=\"unitary-group-filter\" className=\"ml-2 text-gray-600 font-medium cursor-pointer\">\r\n                  Only Unitary Groups\r\n                </label>\r\n              </div>\r\n              <button onClick={handleExportToTxt} className=\"col-span-1 md:col-span-2 lg:col-span-1 bg-green-600 text-white font-semibold py-3 px-6 rounded-full shadow-lg hover:bg-green-700 transition duration-200 ease-in-out transform hover:scale-105\">\r\n                Export to TXT\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"overflow-x-auto rounded-lg shadow-md\">\r\n              <table className=\"min-w-full bg-white border-collapse\">\r\n                <thead className=\"bg-gray-200 text-gray-700 uppercase text-sm leading-normal\">\r\n                  <tr>\r\n                    <th className=\"py-3 px-6 text-left\">Accession ID</th>\r\n                    <th className=\"py-3 px-6 text-left\">Description</th>\r\n                    <th className=\"py-3 px-6 text-left\">Sample</th>\r\n                    <th className=\"py-3 px-6 text-left\">Association</th>\r\n                    <th className=\"py-3 px-6 text-left\">Unitary Group</th>\r\n                    <th className=\"py-3 px-6 text-left\">Area</th>\r\n                    <th className=\"py-3 px-6 text-left\">Total Peptides</th>\r\n                    <th className=\"py-3 px-6 text-left\">Unique Peptides</th>\r\n                    <th className=\"py-3 px-6 text-left\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"text-gray-600 text-sm font-light\">\r\n                  {filteredData.map((protein, index) => (\r\n                    <React.Fragment key={index}>\r\n                      <tr className=\"border-b border-gray-200 hover:bg-gray-100 transition duration-200\">\r\n                        <td className=\"py-3 px-6 whitespace-nowrap\">{protein.accession}</td>\r\n                        <td className=\"py-3 px-6\">{protein.description}</td>\r\n                        <td className=\"py-3 px-6\">{protein.sampleName}</td>\r\n                        <td className=\"py-3 px-6\">{protein.diseaseAssociation}</td>\r\n                        <td className=\"py-3 px-6\">{protein.isUnitaryGroup ? 'Yes' : 'No'}</td>\r\n                        <td className=\"py-3 px-6\">{protein.area.toFixed(2)}</td>\r\n                        <td className=\"py-3 px-6\">{protein.totalPeptides}</td>\r\n                        <td className=\"py-3 px-6\">{protein.uniquePeptidesCount}</td>\r\n                        <td className=\"py-3 px-6\">\r\n                          <button onClick={() => toggleRow(index)} className=\"bg-blue-500 text-white py-1 px-3 rounded-full text-xs hover:bg-blue-600 transition duration-200\">\r\n                            {expandedRow === index ? 'Close' : 'View Peptides'}\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                      {expandedRow === index && (\r\n                        <tr className=\"bg-gray-50 border-b border-gray-200\">\r\n                          <td colSpan=\"9\" className=\"p-4\">\r\n                            <h4 className=\"text-sm font-bold text-gray-700 mb-2\">Unique Peptides:</h4>\r\n                            <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\r\n                              {protein.uniquePeptides.length > 0 ? (\r\n                                protein.uniquePeptides.map((peptide, pIndex) => (\r\n                                  <li key={pIndex}>{peptide}</li>\r\n                                ))\r\n                              ) : (\r\n                                <li>No unique peptides associated.</li>\r\n                              )}\r\n                            </ul>\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n        \r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}