{"ast":null,"code":"import _objectSpread from\"C:/Users/Carlos-PC/Desktop/TRABAJO/Analisis_Python/AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1/analisis-biomarcadores/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';// Define regular expressions patterns for pathogenic variants\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const pathogenicPattern=/(-VAR_)|(-[A-Z]\\d+[A-Z])/;// Main application component\nconst App=()=>{// State to manage multiple file input sets\nconst[sampleInputs,setSampleInputs]=useState([{id:1,name:'',files:{peptides:null,proteins:null}}]);// Removed pathogenic_ids file from initial state\nconst[nextSampleInputId,setNextSampleInputId]=useState(2);// For unique slot IDs\n// State to store the results of already processed samples\nconst[processedSamples,setProcessedSamples]=useState([]);// State for the IDs of samples selected for the comparative table and visualizations\nconst[selectedProcessedSampleIds,setSelectedProcessedSampleIds]=useState([]);// State for the currently selected protein for the comparative bar chart\nconst[selectedProteinForChart,setSelectedProteinForChart]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// State to indicate if export is in progress\nconst[isExporting,setIsExporting]=useState(false);// State for Chart.js library loading\nconst[isChartLibraryLoaded,setIsChartLibraryLoaded]=useState(false);// Ref for the comparative bar chart canvas and Chart.js instance\nconst comparativeChartCanvasRef=useRef(null);const comparativeChartInstance=useRef(null);// Get selected samples for the comparative table and visualizations\n// This needs to be declared at the top level of the component's render function\nconst samplesForComparison=processedSamples.filter(sample=>selectedProcessedSampleIds.includes(sample.id));// Helper function to extract disease association\nconst extractDiseaseAssociation=description=>{let association='';// Regex to find \"Association:...\" or \"ClinicalSignificance:...\"\nconst associationMatch=description.match(/Association:([^|]+)/);const clinicalSigMatch=description.match(/ClinicalSignificance:([^|]+)/);if(associationMatch&&associationMatch[1]){association=associationMatch[1].trim();}else if(clinicalSigMatch&&clinicalSigMatch[1]){association=clinicalSigMatch[1].trim();}return association||'N/A';// Return N/A if no association is found\n};// Generate data for the comparative table, heatmap, and bar chart\n// This call should also be after samplesForComparison and extractDiseaseAssociation are defined\nconst getComparativeTableAndVisualizationData=()=>{if(samplesForComparison.length===0)return{headers:[],tableRows:[],visualizationData:[],uniqueProteinAccessions:[]};const uniqueProteinAccessions=new Set();const proteinDetailsMap=new Map();// To store description, unique peptides, etc.\nlet maxAbundance=0;// To scale heatmap colors\n// Collect all unique pathogenic variants and their details from selected samples\nsamplesForComparison.forEach(sample=>{sample.analysisResults.forEach(result=>{uniqueProteinAccessions.add(result['Protein Accession']);// Take details from the first sample where the protein is found\nif(!proteinDetailsMap.has(result['Protein Accession'])){proteinDetailsMap.set(result['Protein Accession'],{description:result['Description'],totalPeptides:result['# Total Peptides'],uniquePeptidesCount:result['# Unique Peptides'],isUniqueGroup:result['Is Protein Group Unique?'],peptidesList:result['Unique Peptides List'],diseaseAssociation:extractDiseaseAssociation(result['Description'])// Extract disease association\n});}// Update max abundance for heatmap scaling\nif(result['Average Abundance']>maxAbundance){maxAbundance=result['Average Abundance'];}});});// Create the comparative table headers\nconst headers=[\"Protein Accession\",\"Description\",\"Disease Association / Clinical Significance\",// New column\n\"# Total Peptides\",\"# Unique Peptides\",\"Is Unique Group?\",\"Unique Peptides List\",// List of unique peptides\n...samplesForComparison.map(sample=>\"Average Abundance (\".concat(sample.name,\")\"))];const tableRows=Array.from(uniqueProteinAccessions).map(accession=>{const details=proteinDetailsMap.get(accession);const rowData=[accession,details.description,details.diseaseAssociation,// Add disease association to the row\ndetails.totalPeptides,details.uniquePeptidesCount,details.isUniqueGroup?'Yes':'No',details.peptidesList];// Add specific abundance for each sample\nsamplesForComparison.forEach(sample=>{const result=sample.analysisResults.find(res=>res['Protein Accession']===accession);rowData.push(result?result['Average Abundance'].toFixed(2):'N/A');});return rowData;});// Data for heatmap and bar chart\nconst visualizationData=Array.from(uniqueProteinAccessions).map(accession=>{const abundancesBySample={};samplesForComparison.forEach(sample=>{const result=sample.analysisResults.find(res=>res['Protein Accession']===accession);abundancesBySample[sample.name]=result?parseFloat(result['Average Abundance'].toFixed(2)):0;});return{proteinAccession:accession,abundancesBySample:abundancesBySample};});return{headers,tableRows,visualizationData,uniqueProteinAccessions:Array.from(uniqueProteinAccessions),maxAbundance};};const{headers:comparativeHeaders,tableRows:comparativeTableRows,visualizationData,uniqueProteinAccessions:allUniqueProteins,maxAbundance}=getComparativeTableAndVisualizationData();// useEffect to dynamically load Chart.js and verify its availability\nuseEffect(()=>{// Check if Chart.js is already available in 'window'\nif(window.Chart){setIsChartLibraryLoaded(true);return;}// If not, try to load it\nconst chartjsUrl='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js';const script=document.createElement('script');script.src=chartjsUrl;script.id='chartjs-script';script.async=true;script.onload=()=>{setIsChartLibraryLoaded(true);};script.onerror=()=>{setError(\"Error loading Chart.js library. The chart will not be available.\");};document.body.appendChild(script);return()=>{const chartScript=document.getElementById('chartjs-script');if(chartScript&&chartScript.parentNode)chartScript.parentNode.removeChild(chartScript);};},[]);// Runs only once on component mount\n// useEffect to render/update the comparative bar chart\nuseEffect(()=>{if(comparativeChartCanvasRef.current&&selectedProteinForChart&&isChartLibraryLoaded&&samplesForComparison.length>0){// Find the protein's data across all selected samples\nconst proteinData=samplesForComparison.map(sample=>{const result=sample.analysisResults.find(res=>res['Protein Accession']===selectedProteinForChart);return result?parseFloat(result['Average Abundance'].toFixed(2)):0;});const labels=samplesForComparison.map(sample=>sample.name);// Destroy previous chart instance if it exists\nif(comparativeChartInstance.current){comparativeChartInstance.current.destroy();}const ctx=comparativeChartCanvasRef.current.getContext('2d');comparativeChartInstance.current=new window.Chart(ctx,{type:'bar',data:{labels:labels,datasets:[{label:\"Average Abundance for \".concat(selectedProteinForChart),data:proteinData,backgroundColor:'rgba(59, 130, 246, 0.7)',borderColor:'rgba(59, 130, 246, 1)',borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:true,position:'top'},title:{display:true,text:\"Comparative Abundance for \".concat(selectedProteinForChart)}},scales:{x:{title:{display:true,text:'Sample'}},y:{beginAtZero:true,title:{display:true,text:'Average Abundance (Normalized)'}}}}});}else{// If no protein selected or libraries not loaded, destroy any existing chart\nif(comparativeChartInstance.current){comparativeChartInstance.current.destroy();comparativeChartInstance.current=null;}}// Cleanup function\nreturn()=>{if(comparativeChartInstance.current){comparativeChartInstance.current.destroy();comparativeChartInstance.current=null;}};},[selectedProteinForChart,samplesForComparison,isChartLibraryLoaded]);// Dependencies for chart re-render\n// Function to add a new sample input slot\nconst addSampleInputSlot=()=>{setSampleInputs([...sampleInputs,{id:nextSampleInputId,name:'',files:{peptides:null,proteins:null}}]);// Removed pathogenic_ids\nsetNextSampleInputId(nextSampleInputId+1);};// Function to remove a sample input slot\nconst removeSampleInputSlot=id=>{setSampleInputs(sampleInputs.filter(slot=>slot.id!==id));// Also remove from selected if it was there\nsetSelectedProcessedSampleIds(prev=>prev.filter(sampleId=>sampleId!==id));};// Handler for changing the name for a specific slot\nconst handleSampleNameChange=(id,newName)=>{setSampleInputs(sampleInputs.map(slot=>slot.id===id?_objectSpread(_objectSpread({},slot),{},{name:newName}):slot));};// Handler for changing files for a specific slot\nconst handleSampleFileChange=(id,fileType,file)=>{setSampleInputs(sampleInputs.map(slot=>slot.id===id?_objectSpread(_objectSpread({},slot.files),{},{[fileType]:file}):slot// Corrected spread operator usage for files\n));};// Function to read and parse a CSV file manually\nconst parseCSV=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=e=>{const text=e.target.result;const rows=text.split('\\n').filter(row=>row.trim()!=='');if(rows.length===0){resolve([]);return;}const headers=rows[0].split(',').map(header=>header.trim().replace(/\"/g,''));const data=[];for(let i=1;i<rows.length;i++){const values=rows[i].split(',');if(values.length!==headers.length){continue;}const rowObject={};headers.forEach((header,index)=>{rowObject[header]=values[index].trim().replace(/\"/g,'');});data.push(rowObject);}resolve(data);};reader.onerror=e=>reject(e);reader.readAsText(file);});};// Removed parseText function as it's no longer needed for pathogenic_ids file\n// const parseText = (file) => {\n//   return new Promise((resolve, reject) => {\n//     const reader = new FileReader();\n//     reader.onload = (e) => resolve(e.target.result);\n//     reader.onerror = (e) => reject(e);\n//     reader.readAsText(file);\n//   });\n// };\n// Function to process all configured samples\nconst processAllSamples=async()=>{setLoading(true);setError(null);const newProcessedSamples=[];let hasError=false;for(const sampleInput of sampleInputs){if(!sampleInput.name.trim()){setError(\"Error: Sample in slot \".concat(sampleInput.id,\" does not have a valid name.\"));hasError=true;break;}// Check only for peptides and proteins files, as pathogenic_ids is removed\nif(!sampleInput.files.peptides||!sampleInput.files.proteins){setError(\"Error: Sample \\\"\".concat(sampleInput.name,\"\\\" does not have all required files loaded.\"));hasError=true;break;}if(newProcessedSamples.some(s=>s.name===sampleInput.name.trim())){setError(\"Error: A sample with the name \\\"\".concat(sampleInput.name,\"\\\" already exists. Sample names must be unique.\"));hasError=true;break;}try{const peptidesData=await parseCSV(sampleInput.files.peptides);const proteinsData=await parseCSV(sampleInput.files.proteins);// Removed call to parseText for pathogenic_ids as it's no longer used\n// const pathogenicIdsText = await parseText(sampleInput.files.pathogenic_ids);\n// Step 1: Combine data\nconst peptidesMap=new Map();peptidesData.forEach(p=>{if(!peptidesMap.has(p['Protein Accession']))peptidesMap.set(p['Protein Accession'],[]);peptidesMap.get(p['Protein Accession']).push(p);});const proteinsMap=new Map();proteinsData.forEach(p=>proteinsMap.set(p['Accession'],p));const mergedData=peptidesData.map(peptide=>{const proteinInfo=proteinsMap.get(peptide['Protein Accession']);return _objectSpread(_objectSpread({},peptide),{},{Description:proteinInfo?proteinInfo.Description:'',Accession:proteinInfo?proteinInfo.Accession:'','Area IBIS_DDA_1':parseFloat(peptide['Area IBIS_DDA_1'])||0,'-10lgP':parseFloat(peptide['-10lgP'])||0});});// Step 2: Data Normalization\nconst totalArea=mergedData.reduce((sum,item)=>sum+item['Area IBIS_DDA_1'],0);const normFactor=totalArea>0?1000000/totalArea:1;const normalizedData=mergedData.map(item=>_objectSpread(_objectSpread({},item),{},{'Area IBIS_DDA_1':item['Area IBIS_DDA_1']*normFactor}));// Step 3: Determine group uniqueness and unique peptides\nconst proteinGroups=new Map();normalizedData.forEach(d=>{const group=d['Protein Group'];if(!proteinGroups.has(group))proteinGroups.set(group,new Set());proteinGroups.get(group).add(d['Protein Accession']);});const uniquePeptides=new Map();normalizedData.forEach(d=>{if(d['Unique']==='Y'){if(!uniquePeptides.has(d['Protein Accession']))uniquePeptides.set(d['Protein Accession'],new Set());uniquePeptides.get(d['Protein Accession']).add(d.Peptide);}});const processedData=normalizedData.map(d=>_objectSpread(_objectSpread({},d),{},{'Is Protein Group Unique?':proteinGroups.get(d['Protein Group']).size===1,'Unique Peptides List':Array.from(uniquePeptides.get(d['Protein Accession'])||[]).join('; '),'# Unique Peptides':(uniquePeptides.get(d['Protein Accession'])||[]).size}));// Step 4: Select the most reliable protein per group\nconst uniqueProteinsMap=new Map();processedData.forEach(item=>{const group=item['Protein Group'];if(!uniqueProteinsMap.has(group)||item['-10lgP']>uniqueProteinsMap.get(group)['-10lgP']){uniqueProteinsMap.set(group,item);}});const uniqueProteins=Array.from(uniqueProteinsMap.values());// Step 5: Filter by pathogenic variants\nconst pathogenicVariants=uniqueProteins.filter(p=>p['Protein Accession']&&pathogenicPattern.test(p['Protein Accession'])&&p.Description&&p.Description.includes('PATHOGENIC_VARIANT'));// Step 6: Calculate average abundance and prepare results\nconst finalResults=pathogenicVariants.map(variant=>{const peptidesForVariant=processedData.filter(p=>p['Protein Accession']===variant['Protein Accession']);const totalPeptides=peptidesForVariant.length;const avgArea=totalPeptides>0?peptidesForVariant.reduce((sum,p)=>sum+p['Area IBIS_DDA_1'],0)/totalPeptides:0;const proteinsInGroup=proteinGroups.get(variant['Protein Group']).size;return{'Protein Accession':variant['Protein Accession'],'Description':variant.Description,'Average Abundance':avgArea,'# Total Peptides':totalPeptides,'# Unique Peptides':variant['# Unique Peptides'],'# Proteins in Group':proteinsInGroup,'Is Protein Group Unique?':variant['Is Protein Group Unique?'],'Unique Peptides List':variant['Unique Peptides List']};}).sort((a,b)=>b['Average Abundance']-a['Average Abundance']);newProcessedSamples.push({id:sampleInput.id,name:sampleInput.name.trim(),analysisResults:finalResults,totalPeptidesCount:peptidesData.length,totalProteinsCount:uniqueProteins.length,normalizationFactor:normFactor});}catch(err){console.error(\"Error processing sample \".concat(sampleInput.name,\":\"),err);setError(\"An error occurred while processing sample \\\"\".concat(sampleInput.name,\"\\\". Please ensure file format is correct.\"));hasError=true;break;}}if(!hasError){setProcessedSamples(newProcessedSamples);// Select all processed samples by default for initial comparison\nsetSelectedProcessedSampleIds(newProcessedSamples.map(s=>s.id));if(newProcessedSamples.length>0){setError(null);// Clear any previous error if processing was successful\n}else{setError(\"No samples could be processed. Ensure all files are loaded and names are correct.\");}}setLoading(false);};// Handler for selecting/deselecting samples for comparison\nconst handleSelectSampleForComparison=id=>{setSelectedProcessedSampleIds(prevSelected=>prevSelected.includes(id)?prevSelected.filter(sampleId=>sampleId!==id):[...prevSelected,id]);};// Function to get color for heatmap cell based on abundance\nconst getHeatmapColor=abundance=>{if(abundance===0)return'rgba(240, 240, 240, 1)';// Light gray for N/A or zero\n// Scale abundance to a color gradient (e.g., green to dark green or blue to dark blue)\n// Using HSL for easier gradient control: Hue, Saturation, Lightness\nconst hue=210;// Blue hue\nconst saturation=80;// %\nconst maxLightness=95;// Lightest blue for lowest abundance (non-zero)\nconst minLightness=30;// Darkest blue for highest abundance\n// Calculate lightness based on abundance relative to maxAbundance\n// Ensure maxAbundance is not zero to prevent division by zero\nconst scaledAbundance=maxAbundance>0?abundance/maxAbundance:0;const lightness=maxLightness-scaledAbundance*(maxLightness-minLightness);return\"hsl(\".concat(hue,\", \").concat(saturation,\"%, \").concat(lightness,\"%)\");};// Function to export the comparative table to CSV\nconst exportComparativeToCsv=()=>{if(comparativeTableRows.length===0){setError(\"No comparative table data to export.\");return;}setIsExporting(true);const csvRows=[];csvRows.push(comparativeHeaders.join(','));// Add headers\ncomparativeTableRows.forEach(row=>{const formattedRow=row.map(cell=>{// Ensure cells with commas or quotes are properly escaped\nif(typeof cell==='string'&&(cell.includes(',')||cell.includes('\"'))){return\"\\\"\".concat(cell.replace(/\"/g,'\"\"'),\"\\\"\");}return cell;});csvRows.push(formattedRow.join(','));});const csvString=csvRows.join('\\n');const blob=new Blob([csvString],{type:'text/csv;charset=utf-8;'});const link=document.createElement('a');if(link.download!==undefined){const url=URL.createObjectURL(blob);link.setAttribute('href',url);link.setAttribute('download','comparative_biomarker_analysis.csv');document.body.appendChild(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url);}else{setError(\"Your browser does not support direct file download.\");}setIsExporting(false);};return/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-100 min-h-screen p-4 sm:p-8 font-sans\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-4xl mx-auto bg-white p-6 rounded-3xl shadow-lg\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl sm:text-4xl font-extrabold text-blue-700 mb-2\",children:\"Multi-Sample Biomarker Analysis\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-600 mb-8\",children:\"Load and compare the abundance of pathogenic proteins across different samples.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-8 p-6 bg-blue-50 rounded-3xl shadow-inner\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-bold text-blue-800 mb-4\",children:\"Manage Samples\"}),sampleInputs.map((sampleSlot,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-3\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"sampleName-\".concat(sampleSlot.id),className:\"block text-base font-medium text-gray-700\",children:[\"Sample \",index+1]}),sampleInputs.length>1&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>removeSampleInputSlot(sampleSlot.id),className:\"text-red-600 hover:text-red-800 text-sm font-semibold\",children:\"Remove\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"sampleName-\".concat(sampleSlot.id),value:sampleSlot.name,onChange:e=>handleSampleNameChange(sampleSlot.id,e.target.value),placeholder:\"Sample Name (e.g., Control, Treated)\",className:\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 mb-4\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"p-2 bg-gray-50 rounded-xl border border-gray-100\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Peptides File (`protein-peptides.csv`)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".csv\",onChange:e=>handleSampleFileChange(sampleSlot.id,'peptides',e.target.files[0]),className:\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"p-2 bg-gray-50 rounded-xl border border-gray-100\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Proteins File (`proteins.csv`)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".csv\",onChange:e=>handleSampleFileChange(sampleSlot.id,'proteins',e.target.files[0]),className:\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"})]})]})]},sampleSlot.id)),/*#__PURE__*/_jsx(\"button\",{onClick:addSampleInputSlot,className:\"w-full py-2 px-4 bg-gray-200 text-gray-700 font-semibold rounded-2xl hover:bg-gray-300 transition-colors mb-4\",children:\"+ Add Sample Slot\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:processAllSamples,disabled:loading||sampleInputs.every(s=>!s.name.trim()&&!s.files.peptides)// Disable if no valid inputs\n,className:\"w-full py-3 px-6 bg-blue-600 text-white font-bold rounded-2xl shadow-md hover:bg-blue-700 transition-colors disabled:bg-blue-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\",children:[loading&&/*#__PURE__*/_jsxs(\"svg\",{className:\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\",xmlns:\"http://www.w3.org/2000/svg\",fill:\"none\",viewBox:\"0 0 24 24\",children:[/*#__PURE__*/_jsx(\"circle\",{className:\"opacity-25\",cx:\"12\",cy:\"12\",r:\"10\",stroke:\"currentColor\",strokeWidth:\"4\"}),/*#__PURE__*/_jsx(\"path\",{className:\"opacity-75\",fill:\"currentColor\",d:\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"})]}),/*#__PURE__*/_jsx(\"span\",{children:loading?\"Processing Samples...\":\"Process All Samples\"})]})]}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 p-4 text-red-700 bg-red-100 rounded-2xl border border-red-200\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"font-semibold\",children:\"Error:\"}),/*#__PURE__*/_jsx(\"p\",{children:error})]}),processedSamples.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-8 p-6 bg-gray-50 rounded-3xl shadow-inner\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-bold text-gray-800 mb-4\",children:\"Select Samples for Comparison\"}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\",children:processedSamples.map(sample=>/*#__PURE__*/_jsxs(\"label\",{className:\"inline-flex items-center p-2 bg-white rounded-xl border border-gray-200 shadow-sm cursor-pointer hover:bg-gray-100 transition-colors\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedProcessedSampleIds.includes(sample.id),onChange:()=>handleSelectSampleForComparison(sample.id),className:\"form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ml-2 text-gray-700 font-medium\",children:sample.name})]},sample.id))}),selectedProcessedSampleIds.length>0&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-gray-600 mt-4\",children:[\"Selected samples: \",selectedProcessedSampleIds.length]})]}),visualizationData.length>0&&isChartLibraryLoaded&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 p-6 bg-gray-50 rounded-3xl shadow-inner\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold text-gray-800 mb-6\",children:\"Visualizations\"}),/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-gray-700 mb-4\",children:\"Comparative Bar Chart (Select a Protein)\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"proteinForChart\",className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Select Protein Accession:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"proteinForChart\",value:selectedProteinForChart,onChange:e=>setSelectedProteinForChart(e.target.value),className:\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\",disabled:!allUniqueProteins||allUniqueProteins.length===0,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Select a Protein --\"}),allUniqueProteins.map(accession=>/*#__PURE__*/_jsx(\"option\",{value:accession,children:accession},accession))]})]}),selectedProteinForChart&&/*#__PURE__*/_jsx(\"div\",{className:\"mb-8 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\",style:{height:'400px',width:'100%'},children:/*#__PURE__*/_jsx(\"canvas\",{ref:comparativeChartCanvasRef})}),!selectedProteinForChart&&/*#__PURE__*/_jsx(\"div\",{className:\"mb-8 p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"font-semibold\",children:\"Select a protein from the dropdown above to view its comparative abundance across samples.\"})}),/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-bold text-gray-700 mb-4 mt-8\",children:\"Comparative Abundance Heatmap\"}),/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\",children:visualizationData.length>0&&samplesForComparison.length>0?/*#__PURE__*/_jsxs(\"div\",{className:\"inline-block min-w-full\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-row sticky top-0 bg-white z-10 border-b border-gray-200\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0\",style:{width:'200px',padding:'8px',fontWeight:'bold'},children:\"Protein Accession\"}),samplesForComparison.map(sample=>/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0 text-center\",style:{width:'100px',padding:'8px',fontWeight:'bold'},children:sample.name},sample.id))]}),visualizationData.map((proteinRow,rowIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-row border-b border-gray-100 hover:bg-gray-50\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0 overflow-hidden whitespace-nowrap overflow-ellipsis\",style:{width:'200px',padding:'8px',borderRight:'1px solid #e5e7eb'},title:proteinRow.proteinAccession,children:proteinRow.proteinAccession}),samplesForComparison.map(sample=>/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0 text-center flex items-center justify-center text-xs font-mono\",style:{width:'100px',padding:'8px',backgroundColor:getHeatmapColor(proteinRow.abundancesBySample[sample.name]),color:proteinRow.abundancesBySample[sample.name]>maxAbundance/2?'white':'black',// Text color for contrast\nborderRight:'1px solid #e5e7eb'},title:\"Abundance: \".concat(proteinRow.abundancesBySample[sample.name].toFixed(2)),children:proteinRow.abundancesBySample[sample.name]>0?proteinRow.abundancesBySample[sample.name].toFixed(0):'N/A'},sample.id))]},rowIndex))]}):/*#__PURE__*/_jsx(\"div\",{className:\"p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"font-semibold\",children:\"No data available for heatmap. Process samples and select them for comparison.\"})})})]}),!visualizationData.length>0&&processedSamples.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"font-semibold\",children:\"Please select samples for comparison to generate visualizations.\"})}),processedSamples.length>0&&!isChartLibraryLoaded&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\",children:/*#__PURE__*/_jsx(\"p\",{className:\"font-semibold\",children:\"Loading chart library... Please wait for visualizations to appear.\"})}),comparativeTableRows.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold text-gray-800 mb-4\",children:\"Comparative Abundance Table\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-4 text-sm italic\",children:\"Normalized abundances for the selected samples.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-4\",children:/*#__PURE__*/_jsx(\"button\",{onClick:exportComparativeToCsv,disabled:isExporting||comparativeTableRows.length===0,className:\"w-full py-3 px-6 bg-green-600 text-white font-bold rounded-2xl shadow-md hover:bg-green-700 transition-colors disabled:bg-green-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\",children:/*#__PURE__*/_jsx(\"span\",{children:isExporting?\"Exporting...\":\"Export Comparative Table to Excel (CSV)\"})})}),/*#__PURE__*/_jsx(\"div\",{id:\"comparative-results-table\",className:\"overflow-x-auto rounded-xl shadow-inner border border-gray-200\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"min-w-full divide-y divide-gray-200\",children:[/*#__PURE__*/_jsx(\"thead\",{className:\"bg-gray-50\",children:/*#__PURE__*/_jsx(\"tr\",{children:comparativeHeaders.map((header,index)=>/*#__PURE__*/_jsx(\"th\",{className:\"px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",children:header},index))})}),/*#__PURE__*/_jsx(\"tbody\",{className:\"bg-white divide-y divide-gray-200\",children:comparativeTableRows.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"tr\",{className:\"hover:bg-gray-50 transition-colors\",children:row.map((cell,cellIndex)=>/*#__PURE__*/_jsx(\"td\",{className:\"px-4 sm:px-6 py-4 whitespace-normal text-sm \".concat(cellIndex<2?'font-medium text-gray-900':'text-gray-700 font-mono'),children:cell},cellIndex))},rowIndex))})]})})]})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","pathogenicPattern","App","sampleInputs","setSampleInputs","id","name","files","peptides","proteins","nextSampleInputId","setNextSampleInputId","processedSamples","setProcessedSamples","selectedProcessedSampleIds","setSelectedProcessedSampleIds","selectedProteinForChart","setSelectedProteinForChart","loading","setLoading","error","setError","isExporting","setIsExporting","isChartLibraryLoaded","setIsChartLibraryLoaded","comparativeChartCanvasRef","comparativeChartInstance","samplesForComparison","filter","sample","includes","extractDiseaseAssociation","description","association","associationMatch","match","clinicalSigMatch","trim","getComparativeTableAndVisualizationData","length","headers","tableRows","visualizationData","uniqueProteinAccessions","Set","proteinDetailsMap","Map","maxAbundance","forEach","analysisResults","result","add","has","set","totalPeptides","uniquePeptidesCount","isUniqueGroup","peptidesList","diseaseAssociation","map","concat","Array","from","accession","details","get","rowData","find","res","push","toFixed","abundancesBySample","parseFloat","proteinAccession","comparativeHeaders","comparativeTableRows","allUniqueProteins","window","Chart","chartjsUrl","script","document","createElement","src","async","onload","onerror","body","appendChild","chartScript","getElementById","parentNode","removeChild","current","proteinData","labels","destroy","ctx","getContext","type","data","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","display","position","title","text","scales","x","y","beginAtZero","addSampleInputSlot","removeSampleInputSlot","slot","prev","sampleId","handleSampleNameChange","newName","_objectSpread","handleSampleFileChange","fileType","file","parseCSV","Promise","resolve","reject","reader","FileReader","e","target","rows","split","row","header","replace","i","values","rowObject","index","readAsText","processAllSamples","newProcessedSamples","hasError","sampleInput","some","s","peptidesData","proteinsData","peptidesMap","p","proteinsMap","mergedData","peptide","proteinInfo","Description","Accession","totalArea","reduce","sum","item","normFactor","normalizedData","proteinGroups","d","group","uniquePeptides","Peptide","processedData","size","join","uniqueProteinsMap","uniqueProteins","pathogenicVariants","test","finalResults","variant","peptidesForVariant","avgArea","proteinsInGroup","sort","a","b","totalPeptidesCount","totalProteinsCount","normalizationFactor","err","console","handleSelectSampleForComparison","prevSelected","getHeatmapColor","abundance","hue","saturation","maxLightness","minLightness","scaledAbundance","lightness","exportComparativeToCsv","csvRows","formattedRow","cell","csvString","blob","Blob","link","download","undefined","url","URL","createObjectURL","setAttribute","click","revokeObjectURL","className","children","sampleSlot","htmlFor","onClick","value","onChange","placeholder","accept","disabled","every","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","checked","style","height","width","ref","padding","fontWeight","proteinRow","rowIndex","borderRight","color","cellIndex"],"sources":["C:/Users/Carlos-PC/Desktop/TRABAJO/Analisis_Python/AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1/analisis-biomarcadores/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Define regular expressions patterns for pathogenic variants\r\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\r\n\r\n// Main application component\r\nconst App = () => {\r\n  // State to manage multiple file input sets\r\n  const [sampleInputs, setSampleInputs] = useState([{ id: 1, name: '', files: { peptides: null, proteins: null } }]); // Removed pathogenic_ids file from initial state\r\n  const [nextSampleInputId, setNextSampleInputId] = useState(2); // For unique slot IDs\r\n\r\n  // State to store the results of already processed samples\r\n  const [processedSamples, setProcessedSamples] = useState([]);\r\n  // State for the IDs of samples selected for the comparative table and visualizations\r\n  const [selectedProcessedSampleIds, setSelectedProcessedSampleIds] = useState([]);\r\n  // State for the currently selected protein for the comparative bar chart\r\n  const [selectedProteinForChart, setSelectedProteinForChart] = useState('');\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // State to indicate if export is in progress\r\n  const [isExporting, setIsExporting] = useState(false);\r\n\r\n  // State for Chart.js library loading\r\n  const [isChartLibraryLoaded, setIsChartLibraryLoaded] = useState(false);\r\n  // Ref for the comparative bar chart canvas and Chart.js instance\r\n  const comparativeChartCanvasRef = useRef(null);\r\n  const comparativeChartInstance = useRef(null);\r\n\r\n  // Get selected samples for the comparative table and visualizations\r\n  // This needs to be declared at the top level of the component's render function\r\n  const samplesForComparison = processedSamples.filter(sample =>\r\n    selectedProcessedSampleIds.includes(sample.id)\r\n  );\r\n\r\n  // Helper function to extract disease association\r\n  const extractDiseaseAssociation = (description) => {\r\n    let association = '';\r\n    // Regex to find \"Association:...\" or \"ClinicalSignificance:...\"\r\n    const associationMatch = description.match(/Association:([^|]+)/);\r\n    const clinicalSigMatch = description.match(/ClinicalSignificance:([^|]+)/);\r\n\r\n    if (associationMatch && associationMatch[1]) {\r\n      association = associationMatch[1].trim();\r\n    } else if (clinicalSigMatch && clinicalSigMatch[1]) {\r\n      association = clinicalSigMatch[1].trim();\r\n    }\r\n    return association || 'N/A'; // Return N/A if no association is found\r\n  };\r\n\r\n  // Generate data for the comparative table, heatmap, and bar chart\r\n  // This call should also be after samplesForComparison and extractDiseaseAssociation are defined\r\n  const getComparativeTableAndVisualizationData = () => {\r\n    if (samplesForComparison.length === 0) return { headers: [], tableRows: [], visualizationData: [], uniqueProteinAccessions: [] };\r\n\r\n    const uniqueProteinAccessions = new Set();\r\n    const proteinDetailsMap = new Map(); // To store description, unique peptides, etc.\r\n    let maxAbundance = 0; // To scale heatmap colors\r\n\r\n    // Collect all unique pathogenic variants and their details from selected samples\r\n    samplesForComparison.forEach(sample => {\r\n      sample.analysisResults.forEach(result => {\r\n        uniqueProteinAccessions.add(result['Protein Accession']);\r\n        // Take details from the first sample where the protein is found\r\n        if (!proteinDetailsMap.has(result['Protein Accession'])) {\r\n          proteinDetailsMap.set(result['Protein Accession'], {\r\n            description: result['Description'],\r\n            totalPeptides: result['# Total Peptides'],\r\n            uniquePeptidesCount: result['# Unique Peptides'],\r\n            isUniqueGroup: result['Is Protein Group Unique?'],\r\n            peptidesList: result['Unique Peptides List'],\r\n            diseaseAssociation: extractDiseaseAssociation(result['Description']) // Extract disease association\r\n          });\r\n        }\r\n        // Update max abundance for heatmap scaling\r\n        if (result['Average Abundance'] > maxAbundance) {\r\n          maxAbundance = result['Average Abundance'];\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create the comparative table headers\r\n    const headers = [\r\n      \"Protein Accession\",\r\n      \"Description\",\r\n      \"Disease Association / Clinical Significance\", // New column\r\n      \"# Total Peptides\",\r\n      \"# Unique Peptides\",\r\n      \"Is Unique Group?\",\r\n      \"Unique Peptides List\", // List of unique peptides\r\n      ...samplesForComparison.map(sample => `Average Abundance (${sample.name})`)\r\n    ];\r\n\r\n    const tableRows = Array.from(uniqueProteinAccessions).map(accession => {\r\n      const details = proteinDetailsMap.get(accession);\r\n      const rowData = [\r\n        accession,\r\n        details.description,\r\n        details.diseaseAssociation, // Add disease association to the row\r\n        details.totalPeptides,\r\n        details.uniquePeptidesCount,\r\n        details.isUniqueGroup ? 'Yes' : 'No',\r\n        details.peptidesList\r\n      ];\r\n      // Add specific abundance for each sample\r\n      samplesForComparison.forEach(sample => {\r\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === accession);\r\n        rowData.push(result ? result['Average Abundance'].toFixed(2) : 'N/A');\r\n      });\r\n      return rowData;\r\n    });\r\n\r\n    // Data for heatmap and bar chart\r\n    const visualizationData = Array.from(uniqueProteinAccessions).map(accession => {\r\n        const abundancesBySample = {};\r\n        samplesForComparison.forEach(sample => {\r\n            const result = sample.analysisResults.find(res => res['Protein Accession'] === accession);\r\n            abundancesBySample[sample.name] = result ? parseFloat(result['Average Abundance'].toFixed(2)) : 0;\r\n        });\r\n        return {\r\n            proteinAccession: accession,\r\n            abundancesBySample: abundancesBySample\r\n        };\r\n    });\r\n\r\n    return { headers, tableRows, visualizationData, uniqueProteinAccessions: Array.from(uniqueProteinAccessions), maxAbundance };\r\n  };\r\n\r\n  const { headers: comparativeHeaders, tableRows: comparativeTableRows, visualizationData, uniqueProteinAccessions: allUniqueProteins, maxAbundance } = getComparativeTableAndVisualizationData();\r\n\r\n\r\n  // useEffect to dynamically load Chart.js and verify its availability\r\n  useEffect(() => {\r\n    // Check if Chart.js is already available in 'window'\r\n    if (window.Chart) {\r\n      setIsChartLibraryLoaded(true);\r\n      return;\r\n    }\r\n\r\n    // If not, try to load it\r\n    const chartjsUrl = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js';\r\n    const script = document.createElement('script');\r\n    script.src = chartjsUrl;\r\n    script.id = 'chartjs-script';\r\n    script.async = true;\r\n    script.onload = () => {\r\n      setIsChartLibraryLoaded(true);\r\n    };\r\n    script.onerror = () => {\r\n      setError(\"Error loading Chart.js library. The chart will not be available.\");\r\n    };\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      const chartScript = document.getElementById('chartjs-script');\r\n      if (chartScript && chartScript.parentNode) chartScript.parentNode.removeChild(chartScript);\r\n    };\r\n  }, []); // Runs only once on component mount\r\n\r\n  // useEffect to render/update the comparative bar chart\r\n  useEffect(() => {\r\n    if (comparativeChartCanvasRef.current && selectedProteinForChart && isChartLibraryLoaded && samplesForComparison.length > 0) {\r\n      // Find the protein's data across all selected samples\r\n      const proteinData = samplesForComparison.map(sample => {\r\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === selectedProteinForChart);\r\n        return result ? parseFloat(result['Average Abundance'].toFixed(2)) : 0;\r\n      });\r\n\r\n      const labels = samplesForComparison.map(sample => sample.name);\r\n\r\n      // Destroy previous chart instance if it exists\r\n      if (comparativeChartInstance.current) {\r\n        comparativeChartInstance.current.destroy();\r\n      }\r\n\r\n      const ctx = comparativeChartCanvasRef.current.getContext('2d');\r\n      comparativeChartInstance.current = new window.Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            label: `Average Abundance for ${selectedProteinForChart}`,\r\n            data: proteinData,\r\n            backgroundColor: 'rgba(59, 130, 246, 0.7)',\r\n            borderColor: 'rgba(59, 130, 246, 1)',\r\n            borderWidth: 1,\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: 'top',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: `Comparative Abundance for ${selectedProteinForChart}`,\r\n            }\r\n          },\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Sample',\r\n              }\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Average Abundance (Normalized)',\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // If no protein selected or libraries not loaded, destroy any existing chart\r\n      if (comparativeChartInstance.current) {\r\n        comparativeChartInstance.current.destroy();\r\n        comparativeChartInstance.current = null;\r\n      }\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (comparativeChartInstance.current) {\r\n        comparativeChartInstance.current.destroy();\r\n        comparativeChartInstance.current = null;\r\n      }\r\n    };\r\n  }, [selectedProteinForChart, samplesForComparison, isChartLibraryLoaded]); // Dependencies for chart re-render\r\n\r\n\r\n  // Function to add a new sample input slot\r\n  const addSampleInputSlot = () => {\r\n    setSampleInputs([...sampleInputs, { id: nextSampleInputId, name: '', files: { peptides: null, proteins: null } }]); // Removed pathogenic_ids\r\n    setNextSampleInputId(nextSampleInputId + 1);\r\n  };\r\n\r\n  // Function to remove a sample input slot\r\n  const removeSampleInputSlot = (id) => {\r\n    setSampleInputs(sampleInputs.filter(slot => slot.id !== id));\r\n    // Also remove from selected if it was there\r\n    setSelectedProcessedSampleIds(prev => prev.filter(sampleId => sampleId !== id));\r\n  };\r\n\r\n  // Handler for changing the name for a specific slot\r\n  const handleSampleNameChange = (id, newName) => {\r\n    setSampleInputs(sampleInputs.map(slot => slot.id === id ? { ...slot, name: newName } : slot));\r\n  };\r\n\r\n  // Handler for changing files for a specific slot\r\n  const handleSampleFileChange = (id, fileType, file) => {\r\n    setSampleInputs(sampleInputs.map(slot =>\r\n      slot.id === id ? { ...slot.files, [fileType]: file } : slot // Corrected spread operator usage for files\r\n    ));\r\n  };\r\n\r\n  // Function to read and parse a CSV file manually\r\n  const parseCSV = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const text = e.target.result;\r\n        const rows = text.split('\\n').filter(row => row.trim() !== '');\r\n        if (rows.length === 0) {\r\n          resolve([]);\r\n          return;\r\n        }\r\n        const headers = rows[0].split(',').map(header => header.trim().replace(/\"/g, ''));\r\n        const data = [];\r\n        for (let i = 1; i < rows.length; i++) {\r\n          const values = rows[i].split(',');\r\n          if (values.length !== headers.length) {\r\n            continue;\r\n          }\r\n          const rowObject = {};\r\n          headers.forEach((header, index) => {\r\n            rowObject[header] = values[index].trim().replace(/\"/g, '');\r\n          });\r\n          data.push(rowObject);\r\n        }\r\n        resolve(data);\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n\r\n  // Removed parseText function as it's no longer needed for pathogenic_ids file\r\n  // const parseText = (file) => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const reader = new FileReader();\r\n  //     reader.onload = (e) => resolve(e.target.result);\r\n  //     reader.onerror = (e) => reject(e);\r\n  //     reader.readAsText(file);\r\n  //   });\r\n  // };\r\n\r\n  // Function to process all configured samples\r\n  const processAllSamples = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const newProcessedSamples = [];\r\n    let hasError = false;\r\n\r\n    for (const sampleInput of sampleInputs) {\r\n      if (!sampleInput.name.trim()) {\r\n        setError(`Error: Sample in slot ${sampleInput.id} does not have a valid name.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n      // Check only for peptides and proteins files, as pathogenic_ids is removed\r\n      if (!sampleInput.files.peptides || !sampleInput.files.proteins) {\r\n        setError(`Error: Sample \"${sampleInput.name}\" does not have all required files loaded.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n      if (newProcessedSamples.some(s => s.name === sampleInput.name.trim())) {\r\n        setError(`Error: A sample with the name \"${sampleInput.name}\" already exists. Sample names must be unique.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n\r\n      try {\r\n        const peptidesData = await parseCSV(sampleInput.files.peptides);\r\n        const proteinsData = await parseCSV(sampleInput.files.proteins);\r\n        // Removed call to parseText for pathogenic_ids as it's no longer used\r\n        // const pathogenicIdsText = await parseText(sampleInput.files.pathogenic_ids);\r\n\r\n        // Step 1: Combine data\r\n        const peptidesMap = new Map();\r\n        peptidesData.forEach(p => {\r\n          if (!peptidesMap.has(p['Protein Accession'])) peptidesMap.set(p['Protein Accession'], []);\r\n          peptidesMap.get(p['Protein Accession']).push(p);\r\n        });\r\n\r\n        const proteinsMap = new Map();\r\n        proteinsData.forEach(p => proteinsMap.set(p['Accession'], p));\r\n\r\n        const mergedData = peptidesData.map(peptide => {\r\n          const proteinInfo = proteinsMap.get(peptide['Protein Accession']);\r\n          return {\r\n            ...peptide,\r\n            Description: proteinInfo ? proteinInfo.Description : '',\r\n            Accession: proteinInfo ? proteinInfo.Accession : '',\r\n            'Area IBIS_DDA_1': parseFloat(peptide['Area IBIS_DDA_1']) || 0,\r\n            '-10lgP': parseFloat(peptide['-10lgP']) || 0,\r\n          };\r\n        });\r\n\r\n        // Step 2: Data Normalization\r\n        const totalArea = mergedData.reduce((sum, item) => sum + item['Area IBIS_DDA_1'], 0); \r\n        const normFactor = totalArea > 0 ? 1000000 / totalArea : 1;\r\n        \r\n        const normalizedData = mergedData.map(item => ({\r\n          ...item,\r\n          'Area IBIS_DDA_1': item['Area IBIS_DDA_1'] * normFactor,\r\n        }));\r\n\r\n        // Step 3: Determine group uniqueness and unique peptides\r\n        const proteinGroups = new Map();\r\n        normalizedData.forEach(d => {\r\n          const group = d['Protein Group'];\r\n          if (!proteinGroups.has(group)) proteinGroups.set(group, new Set());\r\n          proteinGroups.get(group).add(d['Protein Accession']);\r\n        });\r\n\r\n        const uniquePeptides = new Map();\r\n        normalizedData.forEach(d => {\r\n          if (d['Unique'] === 'Y') {\r\n            if (!uniquePeptides.has(d['Protein Accession'])) uniquePeptides.set(d['Protein Accession'], new Set());\r\n            uniquePeptides.get(d['Protein Accession']).add(d.Peptide);\r\n          }\r\n        });\r\n        \r\n        const processedData = normalizedData.map(d => ({\r\n          ...d,\r\n          'Is Protein Group Unique?': proteinGroups.get(d['Protein Group']).size === 1,\r\n          'Unique Peptides List': Array.from(uniquePeptides.get(d['Protein Accession']) || []).join('; '),\r\n          '# Unique Peptides': (uniquePeptides.get(d['Protein Accession']) || []).size,\r\n        }));\r\n\r\n        // Step 4: Select the most reliable protein per group\r\n        const uniqueProteinsMap = new Map();\r\n        processedData.forEach(item => {\r\n          const group = item['Protein Group'];\r\n          if (!uniqueProteinsMap.has(group) || item['-10lgP'] > uniqueProteinsMap.get(group)['-10lgP']) {\r\n            uniqueProteinsMap.set(group, item);\r\n          }\r\n        });\r\n        const uniqueProteins = Array.from(uniqueProteinsMap.values());\r\n        \r\n        // Step 5: Filter by pathogenic variants\r\n        const pathogenicVariants = uniqueProteins.filter(p => \r\n          (p['Protein Accession'] && pathogenicPattern.test(p['Protein Accession'])) &&\r\n          (p.Description && p.Description.includes('PATHOGENIC_VARIANT'))\r\n        );\r\n\r\n        // Step 6: Calculate average abundance and prepare results\r\n        const finalResults = pathogenicVariants.map(variant => {\r\n          const peptidesForVariant = processedData.filter(p => p['Protein Accession'] === variant['Protein Accession']);\r\n          const totalPeptides = peptidesForVariant.length;\r\n          const avgArea = totalPeptides > 0 ? peptidesForVariant.reduce((sum, p) => sum + p['Area IBIS_DDA_1'], 0) / totalPeptides : 0;\r\n          const proteinsInGroup = proteinGroups.get(variant['Protein Group']).size;\r\n\r\n          return {\r\n            'Protein Accession': variant['Protein Accession'],\r\n            'Description': variant.Description,\r\n            'Average Abundance': avgArea,\r\n            '# Total Peptides': totalPeptides,\r\n            '# Unique Peptides': variant['# Unique Peptides'],\r\n            '# Proteins in Group': proteinsInGroup,\r\n            'Is Protein Group Unique?': variant['Is Protein Group Unique?'],\r\n            'Unique Peptides List': variant['Unique Peptides List'],\r\n          };\r\n        }).sort((a, b) => b['Average Abundance'] - a['Average Abundance']);\r\n\r\n\r\n        newProcessedSamples.push({\r\n          id: sampleInput.id,\r\n          name: sampleInput.name.trim(),\r\n          analysisResults: finalResults,\r\n          totalPeptidesCount: peptidesData.length,\r\n          totalProteinsCount: uniqueProteins.length,\r\n          normalizationFactor: normFactor,\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error(`Error processing sample ${sampleInput.name}:`, err);\r\n        setError(`An error occurred while processing sample \"${sampleInput.name}\". Please ensure file format is correct.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!hasError) {\r\n      setProcessedSamples(newProcessedSamples);\r\n      // Select all processed samples by default for initial comparison\r\n      setSelectedProcessedSampleIds(newProcessedSamples.map(s => s.id));\r\n      if (newProcessedSamples.length > 0) {\r\n        setError(null); // Clear any previous error if processing was successful\r\n      } else {\r\n        setError(\"No samples could be processed. Ensure all files are loaded and names are correct.\");\r\n      }\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Handler for selecting/deselecting samples for comparison\r\n  const handleSelectSampleForComparison = (id) => {\r\n    setSelectedProcessedSampleIds(prevSelected =>\r\n      prevSelected.includes(id)\r\n        ? prevSelected.filter(sampleId => sampleId !== id)\r\n        : [...prevSelected, id]\r\n    );\r\n  };\r\n\r\n\r\n  // Function to get color for heatmap cell based on abundance\r\n  const getHeatmapColor = (abundance) => {\r\n    if (abundance === 0) return 'rgba(240, 240, 240, 1)'; // Light gray for N/A or zero\r\n    // Scale abundance to a color gradient (e.g., green to dark green or blue to dark blue)\r\n    // Using HSL for easier gradient control: Hue, Saturation, Lightness\r\n    const hue = 210; // Blue hue\r\n    const saturation = 80; // %\r\n    const maxLightness = 95; // Lightest blue for lowest abundance (non-zero)\r\n    const minLightness = 30; // Darkest blue for highest abundance\r\n\r\n    // Calculate lightness based on abundance relative to maxAbundance\r\n    // Ensure maxAbundance is not zero to prevent division by zero\r\n    const scaledAbundance = maxAbundance > 0 ? (abundance / maxAbundance) : 0;\r\n    const lightness = maxLightness - (scaledAbundance * (maxLightness - minLightness));\r\n    \r\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n  };\r\n\r\n\r\n  // Function to export the comparative table to CSV\r\n  const exportComparativeToCsv = () => {\r\n    if (comparativeTableRows.length === 0) {\r\n      setError(\"No comparative table data to export.\");\r\n      return;\r\n    }\r\n    setIsExporting(true);\r\n\r\n    const csvRows = [];\r\n    csvRows.push(comparativeHeaders.join(',')); // Add headers\r\n\r\n    comparativeTableRows.forEach(row => {\r\n      const formattedRow = row.map(cell => {\r\n        // Ensure cells with commas or quotes are properly escaped\r\n        if (typeof cell === 'string' && (cell.includes(',') || cell.includes('\"'))) {\r\n          return `\"${cell.replace(/\"/g, '\"\"')}\"`;\r\n        }\r\n        return cell;\r\n      });\r\n      csvRows.push(formattedRow.join(','));\r\n    });\r\n\r\n    const csvString = csvRows.join('\\n');\r\n    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    if (link.download !== undefined) {\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', 'comparative_biomarker_analysis.csv');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n    } else {\r\n      setError(\"Your browser does not support direct file download.\");\r\n    }\r\n    setIsExporting(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen p-4 sm:p-8 font-sans\">\r\n      <div className=\"max-w-4xl mx-auto bg-white p-6 rounded-3xl shadow-lg\">\r\n        <h1 className=\"text-3xl sm:text-4xl font-extrabold text-blue-700 mb-2\">Multi-Sample Biomarker Analysis</h1>\r\n        <p className=\"text-lg text-gray-600 mb-8\">Load and compare the abundance of pathogenic proteins across different samples.</p>\r\n\r\n        {/* Section to manage sample slots */}\r\n        <div className=\"mb-8 p-6 bg-blue-50 rounded-3xl shadow-inner\">\r\n          <h2 className=\"text-xl font-bold text-blue-800 mb-4\">Manage Samples</h2>\r\n          {sampleInputs.map((sampleSlot, index) => (\r\n            <div key={sampleSlot.id} className=\"mb-6 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\">\r\n              <div className=\"flex justify-between items-center mb-3\">\r\n                <label htmlFor={`sampleName-${sampleSlot.id}`} className=\"block text-base font-medium text-gray-700\">Sample {index + 1}</label>\r\n                {sampleInputs.length > 1 && (\r\n                  <button\r\n                    onClick={() => removeSampleInputSlot(sampleSlot.id)}\r\n                    className=\"text-red-600 hover:text-red-800 text-sm font-semibold\"\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                )}\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                id={`sampleName-${sampleSlot.id}`}\r\n                value={sampleSlot.name}\r\n                onChange={(e) => handleSampleNameChange(sampleSlot.id, e.target.value)}\r\n                placeholder=\"Sample Name (e.g., Control, Treated)\"\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 mb-4\"\r\n              />\r\n              <div className=\"space-y-3\">\r\n                <div className=\"p-2 bg-gray-50 rounded-xl border border-gray-100\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Peptides File (`protein-peptides.csv`)</label>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".csv\"\r\n                    onChange={(e) => handleSampleFileChange(sampleSlot.id, 'peptides', e.target.files[0])} \r\n                    className=\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\r\n                  />\r\n                </div>\r\n                <div className=\"p-2 bg-gray-50 rounded-xl border border-gray-100\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Proteins File (`proteins.csv`)</label>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".csv\"\r\n                    onChange={(e) => handleSampleFileChange(sampleSlot.id, 'proteins', e.target.files[0])} \r\n                    className=\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\r\n                  />\r\n                </div>\r\n                {/* Removed Pathogenic IDs File input as parseText is no longer used for it */}\r\n                {/* <div className=\"p-2 bg-gray-50 rounded-xl border border-gray-100\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Pathogenic IDs File (`.txt`)</label>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".txt\"\r\n                    onChange={(e) => handleSampleFileChange(sampleSlot.id, 'pathogenic_ids', e.target.files[0])} \r\n                    className=\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\r\n                  />\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <button\r\n            onClick={addSampleInputSlot}\r\n            className=\"w-full py-2 px-4 bg-gray-200 text-gray-700 font-semibold rounded-2xl hover:bg-gray-300 transition-colors mb-4\"\r\n          >\r\n            + Add Sample Slot\r\n          </button>\r\n          <button\r\n            onClick={processAllSamples}\r\n            disabled={loading || sampleInputs.every(s => !s.name.trim() && !s.files.peptides)} // Disable if no valid inputs\r\n            className=\"w-full py-3 px-6 bg-blue-600 text-white font-bold rounded-2xl shadow-md hover:bg-blue-700 transition-colors disabled:bg-blue-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\r\n          >\r\n            {loading && (\r\n              <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n              </svg>\r\n            )}\r\n            <span>{loading ? \"Processing Samples...\" : \"Process All Samples\"}</span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Error Message */}\r\n        {error && (\r\n          <div className=\"mt-4 p-4 text-red-700 bg-red-100 rounded-2xl border border-red-200\">\r\n            <p className=\"font-semibold\">Error:</p>\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Sample Selector for Comparison */}\r\n        {processedSamples.length > 0 && (\r\n          <div className=\"mb-8 p-6 bg-gray-50 rounded-3xl shadow-inner\">\r\n            <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Select Samples for Comparison</h2>\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n              {processedSamples.map(sample => (\r\n                <label key={sample.id} className=\"inline-flex items-center p-2 bg-white rounded-xl border border-gray-200 shadow-sm cursor-pointer hover:bg-gray-100 transition-colors\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedProcessedSampleIds.includes(sample.id)}\r\n                    onChange={() => handleSelectSampleForComparison(sample.id)}\r\n                    className=\"form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500\"\r\n                  />\r\n                  <span className=\"ml-2 text-gray-700 font-medium\">{sample.name}</span>\r\n                </label>\r\n              ))}\r\n            </div>\r\n            {selectedProcessedSampleIds.length > 0 && (\r\n              <p className=\"text-sm text-gray-600 mt-4\">Selected samples: {selectedProcessedSampleIds.length}</p>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Visualizations Section */}\r\n        {(visualizationData.length > 0 && isChartLibraryLoaded) && (\r\n          <div className=\"mt-8 p-6 bg-gray-50 rounded-3xl shadow-inner\">\r\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Visualizations</h2>\r\n\r\n            {/* Comparative Bar Chart */}\r\n            <h3 className=\"text-xl font-bold text-gray-700 mb-4\">Comparative Bar Chart (Select a Protein)</h3>\r\n            <div className=\"mb-4\">\r\n              <label htmlFor=\"proteinForChart\" className=\"block text-sm font-medium text-gray-700 mb-1\">Select Protein Accession:</label>\r\n              <select\r\n                id=\"proteinForChart\"\r\n                value={selectedProteinForChart}\r\n                onChange={(e) => setSelectedProteinForChart(e.target.value)}\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\r\n                disabled={!allUniqueProteins || allUniqueProteins.length === 0}\r\n              >\r\n                <option value=\"\">-- Select a Protein --</option>\r\n                {allUniqueProteins.map(accession => (\r\n                  <option key={accession} value={accession}>{accession}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            {selectedProteinForChart && (\r\n              <div className=\"mb-8 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\" style={{ height: '400px', width: '100%' }}>\r\n                <canvas ref={comparativeChartCanvasRef}></canvas>\r\n              </div>\r\n            )}\r\n            {!selectedProteinForChart && (\r\n                <div className=\"mb-8 p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                    <p className=\"font-semibold\">Select a protein from the dropdown above to view its comparative abundance across samples.</p>\r\n                </div>\r\n            )}\r\n\r\n\r\n            {/* Heatmap */}\r\n            <h3 className=\"text-xl font-bold text-gray-700 mb-4 mt-8\">Comparative Abundance Heatmap</h3>\r\n            <div className=\"overflow-x-auto p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\">\r\n                {visualizationData.length > 0 && samplesForComparison.length > 0 ? (\r\n                    <div className=\"inline-block min-w-full\">\r\n                        {/* Heatmap Header (Sample Names) */}\r\n                        <div className=\"flex flex-row sticky top-0 bg-white z-10 border-b border-gray-200\">\r\n                            <div className=\"flex-shrink-0\" style={{ width: '200px', padding: '8px', fontWeight: 'bold' }}>Protein Accession</div>\r\n                            {samplesForComparison.map(sample => (\r\n                                <div key={sample.id} className=\"flex-shrink-0 text-center\" style={{ width: '100px', padding: '8px', fontWeight: 'bold' }}>{sample.name}</div>\r\n                            ))}\r\n                        </div>\r\n                        {/* Heatmap Grid */}\r\n                        {visualizationData.map((proteinRow, rowIndex) => (\r\n                            <div key={rowIndex} className=\"flex flex-row border-b border-gray-100 hover:bg-gray-50\">\r\n                                <div className=\"flex-shrink-0 overflow-hidden whitespace-nowrap overflow-ellipsis\" style={{ width: '200px', padding: '8px', borderRight: '1px solid #e5e7eb' }} title={proteinRow.proteinAccession}>\r\n                                    {proteinRow.proteinAccession}\r\n                                </div>\r\n                                {samplesForComparison.map(sample => (\r\n                                    <div \r\n                                        key={sample.id} \r\n                                        className=\"flex-shrink-0 text-center flex items-center justify-center text-xs font-mono\" \r\n                                        style={{ \r\n                                            width: '100px', \r\n                                            padding: '8px', \r\n                                            backgroundColor: getHeatmapColor(proteinRow.abundancesBySample[sample.name]),\r\n                                            color: proteinRow.abundancesBySample[sample.name] > maxAbundance / 2 ? 'white' : 'black', // Text color for contrast\r\n                                            borderRight: '1px solid #e5e7eb'\r\n                                        }}\r\n                                        title={`Abundance: ${proteinRow.abundancesBySample[sample.name].toFixed(2)}`}\r\n                                    >\r\n                                        {proteinRow.abundancesBySample[sample.name] > 0 ? proteinRow.abundancesBySample[sample.name].toFixed(0) : 'N/A'}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                        <p className=\"font-semibold\">No data available for heatmap. Process samples and select them for comparison.</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {!visualizationData.length > 0 && processedSamples.length > 0 && (\r\n             <div className=\"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                <p className=\"font-semibold\">Please select samples for comparison to generate visualizations.</p>\r\n            </div>\r\n        )}\r\n        {(processedSamples.length > 0 && !isChartLibraryLoaded) && (\r\n            <div className=\"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                <p className=\"font-semibold\">Loading chart library... Please wait for visualizations to appear.</p>\r\n            </div>\r\n        )}\r\n\r\n        {/* Comparative Table Section */}\r\n        {comparativeTableRows.length > 0 && (\r\n          <div className=\"mt-8\">\r\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Comparative Abundance Table</h2>\r\n            <p className=\"text-gray-600 mb-4 text-sm italic\">\r\n                Normalized abundances for the selected samples.\r\n            </p>\r\n            <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-4\">\r\n              <button\r\n                onClick={exportComparativeToCsv}\r\n                disabled={isExporting || comparativeTableRows.length === 0}\r\n                className=\"w-full py-3 px-6 bg-green-600 text-white font-bold rounded-2xl shadow-md hover:bg-green-700 transition-colors disabled:bg-green-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\r\n              >\r\n                <span>{isExporting ? \"Exporting...\" : \"Export Comparative Table to Excel (CSV)\"}</span>\r\n              </button>\r\n            </div>\r\n            <div id=\"comparative-results-table\" className=\"overflow-x-auto rounded-xl shadow-inner border border-gray-200\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    {comparativeHeaders.map((header, index) => (\r\n                      <th key={index} className=\"px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{header}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {comparativeTableRows.map((row, rowIndex) => (\r\n                    <tr key={rowIndex} className=\"hover:bg-gray-50 transition-colors\">\r\n                      {row.map((cell, cellIndex) => (\r\n                        <td key={cellIndex} className={`px-4 sm:px-6 py-4 whitespace-normal text-sm ${cellIndex < 2 ? 'font-medium text-gray-900' : 'text-gray-700 font-mono'}`}>{cell}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}