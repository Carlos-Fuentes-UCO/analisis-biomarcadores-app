{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carlos-PC\\\\Desktop\\\\TRABAJO\\\\Analisis_Python\\\\AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1\\\\analisis-biomarcadores\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Contenido completo de tu código React de la aplicación aquí\n// (El último que te proporcioné con el gráfico comparativo y el heatmap)\nimport React, { useState, useEffect, useRef } from 'react';\n\n// Define regular expressions patterns for pathogenic variants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\n\n// Main application component\nconst App = () => {\n  _s();\n  // State to manage multiple file input sets\n  const [sampleInputs, setSampleInputs] = useState([{\n    id: 1,\n    name: '',\n    files: {\n      peptides: null,\n      proteins: null,\n      pathogenic_ids: null\n    }\n  }]);\n  const [nextSampleInputId, setNextSampleInputId] = useState(2); // For unique slot IDs\n\n  // State to store the results of already processed samples\n  const [processedSamples, setProcessedSamples] = useState([]);\n  // State for the IDs of samples selected for the comparative table and visualizations\n  const [selectedProcessedSampleIds, setSelectedProcessedSampleIds] = useState([]);\n  // State for the currently selected protein for the comparative bar chart\n  const [selectedProteinForChart, setSelectedProteinForChart] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // State to indicate if export is in progress\n  const [isExporting, setIsExporting] = useState(false);\n\n  // State for Chart.js library loading\n  const [isChartLibraryLoaded, setIsChartLibraryLoaded] = useState(false);\n  // Ref for the comparative bar chart canvas and Chart.js instance\n  const comparativeChartCanvasRef = useRef(null);\n  const comparativeChartInstance = useRef(null);\n\n  // Get selected samples for the comparative table and visualizations\n  // This needs to be declared at the top level of the component's render function\n  const samplesForComparison = processedSamples.filter(sample => selectedProcessedSampleIds.includes(sample.id));\n\n  // Helper function to extract disease association - MOVED HERE\n  const extractDiseaseAssociation = description => {\n    let association = '';\n    // Regex to find \"Association:...\" or \"ClinicalSignificance:...\"\n    const associationMatch = description.match(/Association:([^|]+)/);\n    const clinicalSigMatch = description.match(/ClinicalSignificance:([^|]+)/);\n    if (associationMatch && associationMatch[1]) {\n      association = associationMatch[1].trim();\n    } else if (clinicalSigMatch && clinicalSigMatch[1]) {\n      association = clinicalSigMatch[1].trim();\n    }\n    return association || 'N/A'; // Return N/A if no association is found\n  };\n\n  // Generate data for the comparative table, heatmap, and bar chart\n  // This call should also be after samplesForComparison and extractDiseaseAssociation are defined\n  const getComparativeTableAndVisualizationData = () => {\n    if (samplesForComparison.length === 0) return {\n      headers: [],\n      tableRows: [],\n      visualizationData: [],\n      uniqueProteinAccessions: []\n    };\n    const uniqueProteinAccessions = new Set();\n    const proteinDetailsMap = new Map(); // To store description, unique peptides, etc.\n    let maxAbundance = 0; // To scale heatmap colors\n\n    // Collect all unique pathogenic variants and their details from selected samples\n    samplesForComparison.forEach(sample => {\n      sample.analysisResults.forEach(result => {\n        uniqueProteinAccessions.add(result['Protein Accession']);\n        // Take details from the first sample where the protein is found\n        if (!proteinDetailsMap.has(result['Protein Accession'])) {\n          proteinDetailsMap.set(result['Protein Accession'], {\n            description: result['Description'],\n            totalPeptides: result['# Total Peptides'],\n            uniquePeptidesCount: result['# Unique Peptides'],\n            isUniqueGroup: result['Is Protein Group Unique?'],\n            peptidesList: result['Unique Peptides List'],\n            diseaseAssociation: extractDiseaseAssociation(result['Description']) // Extract disease association\n          });\n        }\n        // Update max abundance for heatmap scaling\n        if (result['Average Abundance'] > maxAbundance) {\n          maxAbundance = result['Average Abundance'];\n        }\n      });\n    });\n\n    // Create the comparative table headers\n    const headers = [\"Protein Accession\", \"Description\", \"Disease Association / Clinical Significance\",\n    // New column\n    \"# Total Peptides\", \"# Unique Peptides\", \"Is Unique Group?\", \"Unique Peptides List\",\n    // List of unique peptides\n    ...samplesForComparison.map(sample => `Average Abundance (${sample.name})`)];\n    const tableRows = Array.from(uniqueProteinAccessions).map(accession => {\n      const details = proteinDetailsMap.get(accession);\n      const rowData = [accession, details.description, details.diseaseAssociation,\n      // Add disease association to the row\n      details.totalPeptides, details.uniquePeptidesCount, details.isUniqueGroup ? 'Yes' : 'No', details.peptidesList];\n      // Add specific abundance for each sample\n      samplesForComparison.forEach(sample => {\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === accession);\n        rowData.push(result ? result['Average Abundance'].toFixed(2) : 'N/A');\n      });\n      return rowData;\n    });\n\n    // Data for heatmap and bar chart\n    const visualizationData = Array.from(uniqueProteinAccessions).map(accession => {\n      const abundancesBySample = {};\n      samplesForComparison.forEach(sample => {\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === accession);\n        abundancesBySample[sample.name] = result ? parseFloat(result['Average Abundance'].toFixed(2)) : 0;\n      });\n      return {\n        proteinAccession: accession,\n        abundancesBySample: abundancesBySample\n      };\n    });\n    return {\n      headers,\n      tableRows,\n      visualizationData,\n      uniqueProteinAccessions: Array.from(uniqueProteinAccessions),\n      maxAbundance\n    };\n  };\n  const {\n    headers: comparativeHeaders,\n    tableRows: comparativeTableRows,\n    visualizationData,\n    uniqueProteinAccessions: allUniqueProteins,\n    maxAbundance\n  } = getComparativeTableAndVisualizationData();\n\n  // useEffect to dynamically load Chart.js and verify its availability\n  useEffect(() => {\n    // Check if Chart.js is already available in 'window'\n    if (window.Chart) {\n      setIsChartLibraryLoaded(true);\n      return;\n    }\n\n    // If not, try to load it\n    const chartjsUrl = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js';\n    const script = document.createElement('script');\n    script.src = chartjsUrl;\n    script.id = 'chartjs-script';\n    script.async = true;\n    script.onload = () => {\n      setIsChartLibraryLoaded(true);\n    };\n    script.onerror = () => {\n      setError(\"Error loading Chart.js library. The chart will not be available.\");\n    };\n    document.body.appendChild(script);\n    return () => {\n      const chartScript = document.getElementById('chartjs-script');\n      if (chartScript && chartScript.parentNode) chartScript.parentNode.removeChild(chartScript);\n    };\n  }, []); // Runs only once on component mount\n\n  // useEffect to render/update the comparative bar chart\n  useEffect(() => {\n    if (comparativeChartCanvasRef.current && selectedProteinForChart && isChartLibraryLoaded && samplesForComparison.length > 0) {\n      // Find the protein's data across all selected samples\n      const proteinData = samplesForComparison.map(sample => {\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === selectedProteinForChart);\n        return result ? parseFloat(result['Average Abundance'].toFixed(2)) : 0;\n      });\n      const labels = samplesForComparison.map(sample => sample.name);\n\n      // Destroy previous chart instance if it exists\n      if (comparativeChartInstance.current) {\n        comparativeChartInstance.current.destroy();\n      }\n      const ctx = comparativeChartCanvasRef.current.getContext('2d');\n      comparativeChartInstance.current = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: `Average Abundance for ${selectedProteinForChart}`,\n            data: proteinData,\n            backgroundColor: 'rgba(59, 130, 246, 0.7)',\n            borderColor: 'rgba(59, 130, 246, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: `Comparative Abundance for ${selectedProteinForChart}`\n            }\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Sample'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Average Abundance (Normalized)'\n              }\n            }\n          }\n        }\n      });\n    } else {\n      // If no protein selected or libraries not loaded, destroy any existing chart\n      if (comparativeChartInstance.current) {\n        comparativeChartInstance.current.destroy();\n        comparativeChartInstance.current = null;\n      }\n    }\n\n    // Cleanup function\n    return () => {\n      if (comparativeChartInstance.current) {\n        comparativeChartInstance.current.destroy();\n        comparativeChartInstance.current = null;\n      }\n    };\n  }, [selectedProteinForChart, samplesForComparison, isChartLibraryLoaded]); // Dependencies for chart re-render\n\n  // Function to add a new sample input slot\n  const addSampleInputSlot = () => {\n    setSampleInputs([...sampleInputs, {\n      id: nextSampleInputId,\n      name: '',\n      files: {\n        peptides: null,\n        proteins: null,\n        pathogenic_ids: null\n      }\n    }]);\n    setNextSampleInputId(nextSampleInputId + 1);\n  };\n\n  // Function to remove a sample input slot\n  const removeSampleInputSlot = id => {\n    setSampleInputs(sampleInputs.filter(slot => slot.id !== id));\n    // Also remove from selected if it was there\n    setSelectedProcessedSampleIds(prev => prev.filter(sampleId => sampleId !== id));\n  };\n\n  // Handler for changing the name for a specific slot\n  const handleSampleNameChange = (id, newName) => {\n    setSampleInputs(sampleInputs.map(slot => slot.id === id ? {\n      ...slot,\n      name: newName\n    } : slot));\n  };\n\n  // Handler for changing files for a specific slot\n  const handleSampleFileChange = (id, fileType, file) => {\n    setSampleInputs(sampleInputs.map(slot => slot.id === id ? {\n      ...slot,\n      files: {\n        ...slot.files,\n        [fileType]: file\n      }\n    } : slot));\n  };\n\n  // Function to read and parse a CSV file manually\n  const parseCSV = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const text = e.target.result;\n        const rows = text.split('\\n').filter(row => row.trim() !== '');\n        if (rows.length === 0) {\n          resolve([]);\n          return;\n        }\n        const headers = rows[0].split(',').map(header => header.trim().replace(/\"/g, ''));\n        const data = [];\n        for (let i = 1; i < rows.length; i++) {\n          const values = rows[i].split(',');\n          if (values.length !== headers.length) {\n            continue;\n          }\n          const rowObject = {};\n          headers.forEach((header, index) => {\n            rowObject[header] = values[index].trim().replace(/\"/g, '');\n          });\n          data.push(rowObject);\n        }\n        resolve(data);\n      };\n      reader.onerror = e => reject(e);\n      reader.readAsText(file);\n    });\n  };\n\n  // Function to read a text file\n  const parseText = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => resolve(e.target.result);\n      reader.onerror = e => reject(e);\n      reader.readAsText(file);\n    });\n  };\n\n  // Function to process all configured samples\n  const processAllSamples = async () => {\n    setLoading(true);\n    setError(null);\n    const newProcessedSamples = [];\n    let hasError = false;\n    for (const sampleInput of sampleInputs) {\n      if (!sampleInput.name.trim()) {\n        setError(`Error: Sample in slot ${sampleInput.id} does not have a valid name.`);\n        hasError = true;\n        break;\n      }\n      if (!sampleInput.files.peptides || !sampleInput.files.proteins || !sampleInput.files.pathogenic_ids) {\n        setError(`Error: Sample \"${sampleInput.name}\" does not have all files loaded.`);\n        hasError = true;\n        break;\n      }\n      if (newProcessedSamples.some(s => s.name === sampleInput.name.trim())) {\n        setError(`Error: A sample with the name \"${sampleInput.name}\" already exists. Sample names must be unique.`);\n        hasError = true;\n        break;\n      }\n      try {\n        const peptidesData = await parseCSV(sampleInput.files.peptides);\n        const proteinsData = await parseCSV(sampleInput.files.proteins);\n        const pathogenicIdsText = await parseText(sampleInput.files.pathogenic_ids);\n\n        // Step 1: Combine data\n        const peptidesMap = new Map();\n        peptidesData.forEach(p => {\n          if (!peptidesMap.has(p['Protein Accession'])) peptidesMap.set(p['Protein Accession'], []);\n          peptidesMap.get(p['Protein Accession']).push(p);\n        });\n        const proteinsMap = new Map();\n        proteinsData.forEach(p => proteinsMap.set(p['Accession'], p));\n        const mergedData = peptidesData.map(peptide => {\n          const proteinInfo = proteinsMap.get(peptide['Protein Accession']);\n          return {\n            ...peptide,\n            Description: proteinInfo ? proteinInfo.Description : '',\n            Accession: proteinInfo ? proteinInfo.Accession : '',\n            'Area IBIS_DDA_1': parseFloat(peptide['Area IBIS_DDA_1']) || 0,\n            '-10lgP': parseFloat(peptide['-10lgP']) || 0\n          };\n        });\n\n        // Step 2: Data Normalization\n        const totalArea = mergedData.reduce((sum, item) => sum + item['Area IBIS_DDA_1'], 0);\n        const normFactor = totalArea > 0 ? 1000000 / totalArea : 1;\n        const normalizedData = mergedData.map(item => ({\n          ...item,\n          'Area IBIS_DDA_1': item['Area IBIS_DDA_1'] * normFactor\n        }));\n\n        // Step 3: Determine group uniqueness and unique peptides\n        const proteinGroups = new Map();\n        normalizedData.forEach(d => {\n          const group = d['Protein Group'];\n          if (!proteinGroups.has(group)) proteinGroups.set(group, new Set());\n          proteinGroups.get(group).add(d['Protein Accession']);\n        });\n        const uniquePeptides = new Map();\n        normalizedData.forEach(d => {\n          if (d['Unique'] === 'Y') {\n            if (!uniquePeptides.has(d['Protein Accession'])) uniquePeptides.set(d['Protein Accession'], new Set());\n            uniquePeptides.get(d['Protein Accession']).add(d.Peptide);\n          }\n        });\n        const processedData = normalizedData.map(d => ({\n          ...d,\n          'Is Protein Group Unique?': proteinGroups.get(d['Protein Group']).size === 1,\n          'Unique Peptides List': Array.from(uniquePeptides.get(d['Protein Accession']) || []).join('; '),\n          '# Unique Peptides': (uniquePeptides.get(d['Protein Accession']) || []).size\n        }));\n\n        // Step 4: Select the most reliable protein per group\n        const uniqueProteinsMap = new Map();\n        processedData.forEach(item => {\n          const group = item['Protein Group'];\n          if (!uniqueProteinsMap.has(group) || item['-10lgP'] > uniqueProteinsMap.get(group)['-10lgP']) {\n            uniqueProteinsMap.set(group, item);\n          }\n        });\n        const uniqueProteins = Array.from(uniqueProteinsMap.values());\n\n        // Step 5: Filter by pathogenic variants\n        const pathogenicVariants = uniqueProteins.filter(p => p['Protein Accession'] && pathogenicPattern.test(p['Protein Accession']) && p.Description && p.Description.includes('PATHOGENIC_VARIANT'));\n\n        // Step 6: Calculate average abundance and prepare results\n        const finalResults = pathogenicVariants.map(variant => {\n          const peptidesForVariant = processedData.filter(p => p['Protein Accession'] === variant['Protein Accession']);\n          const totalPeptides = peptidesForVariant.length;\n          const avgArea = totalPeptides > 0 ? peptidesForVariant.reduce((sum, p) => sum + p['Area IBIS_DDA_1'], 0) / totalPeptides : 0;\n          const proteinsInGroup = proteinGroups.get(variant['Protein Group']).size;\n          return {\n            'Protein Accession': variant['Protein Accession'],\n            'Description': variant.Description,\n            'Average Abundance': avgArea,\n            '# Total Peptides': totalPeptides,\n            '# Unique Peptides': variant['# Unique Peptides'],\n            '# Proteins in Group': proteinsInGroup,\n            'Is Protein Group Unique?': variant['Is Protein Group Unique?'],\n            'Unique Peptides List': variant['Unique Peptides List']\n          };\n        }).sort((a, b) => b['Average Abundance'] - a['Average Abundance']);\n        newProcessedSamples.push({\n          id: sampleInput.id,\n          name: sampleInput.name.trim(),\n          analysisResults: finalResults,\n          totalPeptidesCount: peptidesData.length,\n          totalProteinsCount: uniqueProteins.length,\n          normalizationFactor: normFactor\n        });\n      } catch (err) {\n        console.error(`Error processing sample ${sampleInput.name}:`, err);\n        setError(`An error occurred while processing sample \"${sampleInput.name}\". Please ensure file format is correct.`);\n        hasError = true;\n        break;\n      }\n    }\n    if (!hasError) {\n      setProcessedSamples(newProcessedSamples);\n      // Select all processed samples by default for initial comparison\n      setSelectedProcessedSampleIds(newProcessedSamples.map(s => s.id));\n      if (newProcessedSamples.length > 0) {\n        setError(null); // Clear any previous error if processing was successful\n      } else {\n        setError(\"No samples could be processed. Ensure all files are loaded and names are correct.\");\n      }\n    }\n    setLoading(false);\n  };\n\n  // Handler for selecting/deselecting samples for comparison\n  const handleSelectSampleForComparison = id => {\n    setSelectedProcessedSampleIds(prevSelected => prevSelected.includes(id) ? prevSelected.filter(sampleId => sampleId !== id) : [...prevSelected, id]);\n  };\n\n  // Function to get color for heatmap cell based on abundance\n  const getHeatmapColor = abundance => {\n    if (abundance === 0) return 'rgba(240, 240, 240, 1)'; // Light gray for N/A or zero\n    // Scale abundance to a color gradient (e.g., green to dark green or blue to dark blue)\n    // Using HSL for easier gradient control: Hue, Saturation, Lightness\n    const hue = 210; // Blue hue\n    const saturation = 80; // %\n    const maxLightness = 95; // Lightest blue for lowest abundance (non-zero)\n    const minLightness = 30; // Darkest blue for highest abundance\n\n    // Calculate lightness based on abundance relative to maxAbundance\n    // Ensure maxAbundance is not zero to prevent division by zero\n    const scaledAbundance = maxAbundance > 0 ? abundance / maxAbundance : 0;\n    const lightness = maxLightness - scaledAbundance * (maxLightness - minLightness);\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  };\n\n  // Function to export the comparative table to CSV\n  const exportComparativeToCsv = () => {\n    if (comparativeTableRows.length === 0) {\n      setError(\"No comparative table data to export.\");\n      return;\n    }\n    setIsExporting(true);\n    const csvRows = [];\n    csvRows.push(comparativeHeaders.join(',')); // Add headers\n\n    comparativeTableRows.forEach(row => {\n      const formattedRow = row.map(cell => {\n        // Ensure cells with commas or quotes are properly escaped\n        if (typeof cell === 'string' && (cell.includes(',') || cell.includes('\"'))) {\n          return `\"${cell.replace(/\"/g, '\"\"')}\"`;\n        }\n        return cell;\n      });\n      csvRows.push(formattedRow.join(','));\n    });\n    const csvString = csvRows.join('\\n');\n    const blob = new Blob([csvString], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', 'comparative_biomarker_analysis.csv');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } else {\n      setError(\"Your browser does not support direct file download.\");\n    }\n    setIsExporting(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen p-4 sm:p-8 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto bg-white p-6 rounded-3xl shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl sm:text-4xl font-extrabold text-blue-700 mb-2\",\n        children: \"Multi-Sample Biomarker Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-600 mb-8\",\n        children: \"Load and compare the abundance of pathogenic proteins across different samples.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 p-6 bg-blue-50 rounded-3xl shadow-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-blue-800 mb-4\",\n          children: \"Manage Samples\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), sampleInputs.map((sampleSlot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-center mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `sampleName-${sampleSlot.id}`,\n              className: \"block text-base font-medium text-gray-700\",\n              children: [\"Sample \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 17\n            }, this), sampleInputs.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeSampleInputSlot(sampleSlot.id),\n              className: \"text-red-600 hover:text-red-800 text-sm font-semibold\",\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: `sampleName-${sampleSlot.id}`,\n            value: sampleSlot.name,\n            onChange: e => handleSampleNameChange(sampleSlot.id, e.target.value),\n            placeholder: \"Sample Name (e.g., Control, Treated)\",\n            className: \"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 mb-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gray-50 rounded-xl border border-gray-100\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block text-sm font-medium text-gray-700 mb-1\",\n                children: \"Peptides File (`protein-peptides.csv`)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \".csv\",\n                onChange: e => handleSampleFileChange(sampleSlot.id, 'peptides', e.target.files[0]),\n                className: \"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gray-50 rounded-xl border border-gray-100\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block text-sm font-medium text-gray-700 mb-1\",\n                children: \"Proteins File (`proteins.csv`)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \".csv\",\n                onChange: e => handleSampleFileChange(sampleSlot.id, 'proteins', e.target.files[0]),\n                className: \"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2 bg-gray-50 rounded-xl border border-gray-100\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block text-sm font-medium text-gray-700 mb-1\",\n                children: \"Pathogenic IDs File (`.txt`)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \".txt\",\n                onChange: e => handleSampleFileChange(sampleSlot.id, 'pathogenic_ids', e.target.files[0]),\n                className: \"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, sampleSlot.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addSampleInputSlot,\n          className: \"w-full py-2 px-4 bg-gray-200 text-gray-700 font-semibold rounded-2xl hover:bg-gray-300 transition-colors mb-4\",\n          children: \"+ Add Sample Slot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: processAllSamples,\n          disabled: loading || sampleInputs.every(s => !s.name.trim() && !s.files.peptides) // Disable if no valid inputs\n          ,\n          className: \"w-full py-3 px-6 bg-blue-600 text-white font-bold rounded-2xl shadow-md hover:bg-blue-700 transition-colors disabled:bg-blue-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\",\n          children: [loading && /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              className: \"opacity-25\",\n              cx: \"12\",\n              cy: \"12\",\n              r: \"10\",\n              stroke: \"currentColor\",\n              strokeWidth: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              className: \"opacity-75\",\n              fill: \"currentColor\",\n              d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: loading ? \"Processing Samples...\" : \"Process All Samples\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 p-4 text-red-700 bg-red-100 rounded-2xl border border-red-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-semibold\",\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }, this), processedSamples.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8 p-6 bg-gray-50 rounded-3xl shadow-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-gray-800 mb-4\",\n          children: \"Select Samples for Comparison\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\",\n          children: processedSamples.map(sample => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"inline-flex items-center p-2 bg-white rounded-xl border border-gray-200 shadow-sm cursor-pointer hover:bg-gray-100 transition-colors\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedProcessedSampleIds.includes(sample.id),\n              onChange: () => handleSelectSampleForComparison(sample.id),\n              className: \"form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-2 text-gray-700 font-medium\",\n              children: sample.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 19\n            }, this)]\n          }, sample.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this), selectedProcessedSampleIds.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mt-4\",\n          children: [\"Selected samples: \", selectedProcessedSampleIds.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 11\n      }, this), visualizationData.length > 0 && isChartLibraryLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8 p-6 bg-gray-50 rounded-3xl shadow-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-gray-800 mb-6\",\n          children: \"Visualizations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold text-gray-700 mb-4\",\n          children: \"Comparative Bar Chart (Select a Protein)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"proteinForChart\",\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Select Protein Accession:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"proteinForChart\",\n            value: selectedProteinForChart,\n            onChange: e => setSelectedProteinForChart(e.target.value),\n            className: \"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\",\n            disabled: !allUniqueProteins || allUniqueProteins.length === 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"-- Select a Protein --\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this), allUniqueProteins.map(accession => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: accession,\n              children: accession\n            }, accession, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }, this), selectedProteinForChart && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-8 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\",\n          style: {\n            height: '400px',\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: comparativeChartCanvasRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 15\n        }, this), !selectedProteinForChart && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-8 p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-semibold\",\n            children: \"Select a protein from the dropdown above to view its comparative abundance across samples.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold text-gray-700 mb-4 mt-8\",\n          children: \"Comparative Abundance Heatmap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\",\n          children: visualizationData.length > 0 && samplesForComparison.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inline-block min-w-full\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-row sticky top-0 bg-white z-10 border-b border-gray-200\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-shrink-0\",\n                style: {\n                  width: '200px',\n                  padding: '8px',\n                  fontWeight: 'bold'\n                },\n                children: \"Protein Accession\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 676,\n                columnNumber: 29\n              }, this), samplesForComparison.map(sample => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-shrink-0 text-center\",\n                style: {\n                  width: '100px',\n                  padding: '8px',\n                  fontWeight: 'bold'\n                },\n                children: sample.name\n              }, sample.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 33\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 25\n            }, this), visualizationData.map((proteinRow, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-row border-b border-gray-100 hover:bg-gray-50\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-shrink-0 overflow-hidden whitespace-nowrap overflow-ellipsis\",\n                style: {\n                  width: '200px',\n                  padding: '8px',\n                  borderRight: '1px solid #e5e7eb'\n                },\n                title: proteinRow.proteinAccession,\n                children: proteinRow.proteinAccession\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 684,\n                columnNumber: 33\n              }, this), samplesForComparison.map(sample => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-shrink-0 text-center flex items-center justify-center text-xs font-mono\",\n                style: {\n                  width: '100px',\n                  padding: '8px',\n                  backgroundColor: getHeatmapColor(proteinRow.abundancesBySample[sample.name]),\n                  color: proteinRow.abundancesBySample[sample.name] > maxAbundance / 2 ? 'white' : 'black',\n                  // Text color for contrast\n                  borderRight: '1px solid #e5e7eb'\n                },\n                title: `Abundance: ${proteinRow.abundancesBySample[sample.name].toFixed(2)}`,\n                children: proteinRow.abundancesBySample[sample.name] > 0 ? proteinRow.abundancesBySample[sample.name].toFixed(0) : 'N/A'\n              }, sample.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 37\n              }, this))]\n            }, rowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 29\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-semibold\",\n              children: \"No data available for heatmap. Process samples and select them for comparison.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 11\n      }, this), !visualizationData.length > 0 && processedSamples.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-semibold\",\n          children: \"Please select samples for comparison to generate visualizations.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 14\n      }, this), processedSamples.length > 0 && !isChartLibraryLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-semibold\",\n          children: \"Loading chart library... Please wait for visualizations to appear.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 13\n      }, this), comparativeTableRows.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-gray-800 mb-4\",\n          children: \"Comparative Abundance Table\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mb-4 text-sm italic\",\n          children: \"Normalized abundances for the selected samples.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: exportComparativeToCsv,\n            disabled: isExporting || comparativeTableRows.length === 0,\n            className: \"w-full py-3 px-6 bg-green-600 text-white font-bold rounded-2xl shadow-md hover:bg-green-700 transition-colors disabled:bg-green-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: isExporting ? \"Exporting...\" : \"Export Comparative Table to Excel (CSV)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"comparative-results-table\",\n          className: \"overflow-x-auto rounded-xl shadow-inner border border-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"min-w-full divide-y divide-gray-200\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"bg-gray-50\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: comparativeHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                  children: header\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 746,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              className: \"bg-white divide-y divide-gray-200\",\n              children: comparativeTableRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-50 transition-colors\",\n                children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `px-4 sm:px-6 py-4 whitespace-normal text-sm ${cellIndex < 2 ? 'font-medium text-gray-900' : 'text-gray-700 font-mono'}`,\n                  children: cell\n                }, cellIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 754,\n                  columnNumber: 25\n                }, this))\n              }, rowIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 752,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uV2zDtejqO8gLHEjLb8m1AeTVt0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","pathogenicPattern","App","_s","sampleInputs","setSampleInputs","id","name","files","peptides","proteins","pathogenic_ids","nextSampleInputId","setNextSampleInputId","processedSamples","setProcessedSamples","selectedProcessedSampleIds","setSelectedProcessedSampleIds","selectedProteinForChart","setSelectedProteinForChart","loading","setLoading","error","setError","isExporting","setIsExporting","isChartLibraryLoaded","setIsChartLibraryLoaded","comparativeChartCanvasRef","comparativeChartInstance","samplesForComparison","filter","sample","includes","extractDiseaseAssociation","description","association","associationMatch","match","clinicalSigMatch","trim","getComparativeTableAndVisualizationData","length","headers","tableRows","visualizationData","uniqueProteinAccessions","Set","proteinDetailsMap","Map","maxAbundance","forEach","analysisResults","result","add","has","set","totalPeptides","uniquePeptidesCount","isUniqueGroup","peptidesList","diseaseAssociation","map","Array","from","accession","details","get","rowData","find","res","push","toFixed","abundancesBySample","parseFloat","proteinAccession","comparativeHeaders","comparativeTableRows","allUniqueProteins","window","Chart","chartjsUrl","script","document","createElement","src","async","onload","onerror","body","appendChild","chartScript","getElementById","parentNode","removeChild","current","proteinData","labels","destroy","ctx","getContext","type","data","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","display","position","title","text","scales","x","y","beginAtZero","addSampleInputSlot","removeSampleInputSlot","slot","prev","sampleId","handleSampleNameChange","newName","handleSampleFileChange","fileType","file","parseCSV","Promise","resolve","reject","reader","FileReader","e","target","rows","split","row","header","replace","i","values","rowObject","index","readAsText","parseText","processAllSamples","newProcessedSamples","hasError","sampleInput","some","s","peptidesData","proteinsData","pathogenicIdsText","peptidesMap","p","proteinsMap","mergedData","peptide","proteinInfo","Description","Accession","totalArea","reduce","sum","item","normFactor","normalizedData","proteinGroups","d","group","uniquePeptides","Peptide","processedData","size","join","uniqueProteinsMap","uniqueProteins","pathogenicVariants","test","finalResults","variant","peptidesForVariant","avgArea","proteinsInGroup","sort","a","b","totalPeptidesCount","totalProteinsCount","normalizationFactor","err","console","handleSelectSampleForComparison","prevSelected","getHeatmapColor","abundance","hue","saturation","maxLightness","minLightness","scaledAbundance","lightness","exportComparativeToCsv","csvRows","formattedRow","cell","csvString","blob","Blob","link","download","undefined","url","URL","createObjectURL","setAttribute","click","revokeObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sampleSlot","htmlFor","onClick","value","onChange","placeholder","accept","disabled","every","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","checked","style","height","width","ref","padding","fontWeight","proteinRow","rowIndex","borderRight","color","cellIndex","_c","$RefreshReg$"],"sources":["C:/Users/Carlos-PC/Desktop/TRABAJO/Analisis_Python/AMYLOIDOSIS_TEST_DDA_IBiS_PEAKS_IBIS_DDA_1/analisis-biomarcadores/src/App.js"],"sourcesContent":["// Contenido completo de tu código React de la aplicación aquí\r\n// (El último que te proporcioné con el gráfico comparativo y el heatmap)\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Define regular expressions patterns for pathogenic variants\r\nconst pathogenicPattern = /(-VAR_)|(-[A-Z]\\d+[A-Z])/;\r\n\r\n// Main application component\r\nconst App = () => {\r\n  // State to manage multiple file input sets\r\n  const [sampleInputs, setSampleInputs] = useState([{ id: 1, name: '', files: { peptides: null, proteins: null, pathogenic_ids: null } }]);\r\n  const [nextSampleInputId, setNextSampleInputId] = useState(2); // For unique slot IDs\r\n\r\n  // State to store the results of already processed samples\r\n  const [processedSamples, setProcessedSamples] = useState([]);\r\n  // State for the IDs of samples selected for the comparative table and visualizations\r\n  const [selectedProcessedSampleIds, setSelectedProcessedSampleIds] = useState([]);\r\n  // State for the currently selected protein for the comparative bar chart\r\n  const [selectedProteinForChart, setSelectedProteinForChart] = useState('');\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // State to indicate if export is in progress\r\n  const [isExporting, setIsExporting] = useState(false);\r\n\r\n  // State for Chart.js library loading\r\n  const [isChartLibraryLoaded, setIsChartLibraryLoaded] = useState(false);\r\n  // Ref for the comparative bar chart canvas and Chart.js instance\r\n  const comparativeChartCanvasRef = useRef(null);\r\n  const comparativeChartInstance = useRef(null);\r\n\r\n  // Get selected samples for the comparative table and visualizations\r\n  // This needs to be declared at the top level of the component's render function\r\n  const samplesForComparison = processedSamples.filter(sample =>\r\n    selectedProcessedSampleIds.includes(sample.id)\r\n  );\r\n\r\n  // Helper function to extract disease association - MOVED HERE\r\n  const extractDiseaseAssociation = (description) => {\r\n    let association = '';\r\n    // Regex to find \"Association:...\" or \"ClinicalSignificance:...\"\r\n    const associationMatch = description.match(/Association:([^|]+)/);\r\n    const clinicalSigMatch = description.match(/ClinicalSignificance:([^|]+)/);\r\n\r\n    if (associationMatch && associationMatch[1]) {\r\n      association = associationMatch[1].trim();\r\n    } else if (clinicalSigMatch && clinicalSigMatch[1]) {\r\n      association = clinicalSigMatch[1].trim();\r\n    }\r\n    return association || 'N/A'; // Return N/A if no association is found\r\n  };\r\n\r\n  // Generate data for the comparative table, heatmap, and bar chart\r\n  // This call should also be after samplesForComparison and extractDiseaseAssociation are defined\r\n  const getComparativeTableAndVisualizationData = () => {\r\n    if (samplesForComparison.length === 0) return { headers: [], tableRows: [], visualizationData: [], uniqueProteinAccessions: [] };\r\n\r\n    const uniqueProteinAccessions = new Set();\r\n    const proteinDetailsMap = new Map(); // To store description, unique peptides, etc.\r\n    let maxAbundance = 0; // To scale heatmap colors\r\n\r\n    // Collect all unique pathogenic variants and their details from selected samples\r\n    samplesForComparison.forEach(sample => {\r\n      sample.analysisResults.forEach(result => {\r\n        uniqueProteinAccessions.add(result['Protein Accession']);\r\n        // Take details from the first sample where the protein is found\r\n        if (!proteinDetailsMap.has(result['Protein Accession'])) {\r\n          proteinDetailsMap.set(result['Protein Accession'], {\r\n            description: result['Description'],\r\n            totalPeptides: result['# Total Peptides'],\r\n            uniquePeptidesCount: result['# Unique Peptides'],\r\n            isUniqueGroup: result['Is Protein Group Unique?'],\r\n            peptidesList: result['Unique Peptides List'],\r\n            diseaseAssociation: extractDiseaseAssociation(result['Description']) // Extract disease association\r\n          });\r\n        }\r\n        // Update max abundance for heatmap scaling\r\n        if (result['Average Abundance'] > maxAbundance) {\r\n          maxAbundance = result['Average Abundance'];\r\n        }\r\n      });\r\n    });\r\n\r\n    // Create the comparative table headers\r\n    const headers = [\r\n      \"Protein Accession\",\r\n      \"Description\",\r\n      \"Disease Association / Clinical Significance\", // New column\r\n      \"# Total Peptides\",\r\n      \"# Unique Peptides\",\r\n      \"Is Unique Group?\",\r\n      \"Unique Peptides List\", // List of unique peptides\r\n      ...samplesForComparison.map(sample => `Average Abundance (${sample.name})`)\r\n    ];\r\n\r\n    const tableRows = Array.from(uniqueProteinAccessions).map(accession => {\r\n      const details = proteinDetailsMap.get(accession);\r\n      const rowData = [\r\n        accession,\r\n        details.description,\r\n        details.diseaseAssociation, // Add disease association to the row\r\n        details.totalPeptides,\r\n        details.uniquePeptidesCount,\r\n        details.isUniqueGroup ? 'Yes' : 'No',\r\n        details.peptidesList\r\n      ];\r\n      // Add specific abundance for each sample\r\n      samplesForComparison.forEach(sample => {\r\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === accession);\r\n        rowData.push(result ? result['Average Abundance'].toFixed(2) : 'N/A');\r\n      });\r\n      return rowData;\r\n    });\r\n\r\n    // Data for heatmap and bar chart\r\n    const visualizationData = Array.from(uniqueProteinAccessions).map(accession => {\r\n        const abundancesBySample = {};\r\n        samplesForComparison.forEach(sample => {\r\n            const result = sample.analysisResults.find(res => res['Protein Accession'] === accession);\r\n            abundancesBySample[sample.name] = result ? parseFloat(result['Average Abundance'].toFixed(2)) : 0;\r\n        });\r\n        return {\r\n            proteinAccession: accession,\r\n            abundancesBySample: abundancesBySample\r\n        };\r\n    });\r\n\r\n    return { headers, tableRows, visualizationData, uniqueProteinAccessions: Array.from(uniqueProteinAccessions), maxAbundance };\r\n  };\r\n\r\n  const { headers: comparativeHeaders, tableRows: comparativeTableRows, visualizationData, uniqueProteinAccessions: allUniqueProteins, maxAbundance } = getComparativeTableAndVisualizationData();\r\n\r\n\r\n  // useEffect to dynamically load Chart.js and verify its availability\r\n  useEffect(() => {\r\n    // Check if Chart.js is already available in 'window'\r\n    if (window.Chart) {\r\n      setIsChartLibraryLoaded(true);\r\n      return;\r\n    }\r\n\r\n    // If not, try to load it\r\n    const chartjsUrl = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js';\r\n    const script = document.createElement('script');\r\n    script.src = chartjsUrl;\r\n    script.id = 'chartjs-script';\r\n    script.async = true;\r\n    script.onload = () => {\r\n      setIsChartLibraryLoaded(true);\r\n    };\r\n    script.onerror = () => {\r\n      setError(\"Error loading Chart.js library. The chart will not be available.\");\r\n    };\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      const chartScript = document.getElementById('chartjs-script');\r\n      if (chartScript && chartScript.parentNode) chartScript.parentNode.removeChild(chartScript);\r\n    };\r\n  }, []); // Runs only once on component mount\r\n\r\n  // useEffect to render/update the comparative bar chart\r\n  useEffect(() => {\r\n    if (comparativeChartCanvasRef.current && selectedProteinForChart && isChartLibraryLoaded && samplesForComparison.length > 0) {\r\n      // Find the protein's data across all selected samples\r\n      const proteinData = samplesForComparison.map(sample => {\r\n        const result = sample.analysisResults.find(res => res['Protein Accession'] === selectedProteinForChart);\r\n        return result ? parseFloat(result['Average Abundance'].toFixed(2)) : 0;\r\n      });\r\n\r\n      const labels = samplesForComparison.map(sample => sample.name);\r\n\r\n      // Destroy previous chart instance if it exists\r\n      if (comparativeChartInstance.current) {\r\n        comparativeChartInstance.current.destroy();\r\n      }\r\n\r\n      const ctx = comparativeChartCanvasRef.current.getContext('2d');\r\n      comparativeChartInstance.current = new window.Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            label: `Average Abundance for ${selectedProteinForChart}`,\r\n            data: proteinData,\r\n            backgroundColor: 'rgba(59, 130, 246, 0.7)',\r\n            borderColor: 'rgba(59, 130, 246, 1)',\r\n            borderWidth: 1,\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: 'top',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: `Comparative Abundance for ${selectedProteinForChart}`,\r\n            }\r\n          },\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Sample',\r\n              }\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Average Abundance (Normalized)',\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // If no protein selected or libraries not loaded, destroy any existing chart\r\n      if (comparativeChartInstance.current) {\r\n        comparativeChartInstance.current.destroy();\r\n        comparativeChartInstance.current = null;\r\n      }\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (comparativeChartInstance.current) {\r\n        comparativeChartInstance.current.destroy();\r\n        comparativeChartInstance.current = null;\r\n      }\r\n    };\r\n  }, [selectedProteinForChart, samplesForComparison, isChartLibraryLoaded]); // Dependencies for chart re-render\r\n\r\n\r\n  // Function to add a new sample input slot\r\n  const addSampleInputSlot = () => {\r\n    setSampleInputs([...sampleInputs, { id: nextSampleInputId, name: '', files: { peptides: null, proteins: null, pathogenic_ids: null } }]);\r\n    setNextSampleInputId(nextSampleInputId + 1);\r\n  };\r\n\r\n  // Function to remove a sample input slot\r\n  const removeSampleInputSlot = (id) => {\r\n    setSampleInputs(sampleInputs.filter(slot => slot.id !== id));\r\n    // Also remove from selected if it was there\r\n    setSelectedProcessedSampleIds(prev => prev.filter(sampleId => sampleId !== id));\r\n  };\r\n\r\n  // Handler for changing the name for a specific slot\r\n  const handleSampleNameChange = (id, newName) => {\r\n    setSampleInputs(sampleInputs.map(slot => slot.id === id ? { ...slot, name: newName } : slot));\r\n  };\r\n\r\n  // Handler for changing files for a specific slot\r\n  const handleSampleFileChange = (id, fileType, file) => {\r\n    setSampleInputs(sampleInputs.map(slot =>\r\n      slot.id === id ? { ...slot, files: { ...slot.files, [fileType]: file } } : slot\r\n    ));\r\n  };\r\n\r\n  // Function to read and parse a CSV file manually\r\n  const parseCSV = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const text = e.target.result;\r\n        const rows = text.split('\\n').filter(row => row.trim() !== '');\r\n        if (rows.length === 0) {\r\n          resolve([]);\r\n          return;\r\n        }\r\n        const headers = rows[0].split(',').map(header => header.trim().replace(/\"/g, ''));\r\n        const data = [];\r\n        for (let i = 1; i < rows.length; i++) {\r\n          const values = rows[i].split(',');\r\n          if (values.length !== headers.length) {\r\n            continue;\r\n          }\r\n          const rowObject = {};\r\n          headers.forEach((header, index) => {\r\n            rowObject[header] = values[index].trim().replace(/\"/g, '');\r\n          });\r\n          data.push(rowObject);\r\n        }\r\n        resolve(data);\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n\r\n  // Function to read a text file\r\n  const parseText = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n\r\n  // Function to process all configured samples\r\n  const processAllSamples = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const newProcessedSamples = [];\r\n    let hasError = false;\r\n\r\n    for (const sampleInput of sampleInputs) {\r\n      if (!sampleInput.name.trim()) {\r\n        setError(`Error: Sample in slot ${sampleInput.id} does not have a valid name.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n      if (!sampleInput.files.peptides || !sampleInput.files.proteins || !sampleInput.files.pathogenic_ids) {\r\n        setError(`Error: Sample \"${sampleInput.name}\" does not have all files loaded.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n      if (newProcessedSamples.some(s => s.name === sampleInput.name.trim())) {\r\n        setError(`Error: A sample with the name \"${sampleInput.name}\" already exists. Sample names must be unique.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n\r\n      try {\r\n        const peptidesData = await parseCSV(sampleInput.files.peptides);\r\n        const proteinsData = await parseCSV(sampleInput.files.proteins);\r\n        const pathogenicIdsText = await parseText(sampleInput.files.pathogenic_ids);\r\n\r\n        // Step 1: Combine data\r\n        const peptidesMap = new Map();\r\n        peptidesData.forEach(p => {\r\n          if (!peptidesMap.has(p['Protein Accession'])) peptidesMap.set(p['Protein Accession'], []);\r\n          peptidesMap.get(p['Protein Accession']).push(p);\r\n        });\r\n\r\n        const proteinsMap = new Map();\r\n        proteinsData.forEach(p => proteinsMap.set(p['Accession'], p));\r\n\r\n        const mergedData = peptidesData.map(peptide => {\r\n          const proteinInfo = proteinsMap.get(peptide['Protein Accession']);\r\n          return {\r\n            ...peptide,\r\n            Description: proteinInfo ? proteinInfo.Description : '',\r\n            Accession: proteinInfo ? proteinInfo.Accession : '',\r\n            'Area IBIS_DDA_1': parseFloat(peptide['Area IBIS_DDA_1']) || 0,\r\n            '-10lgP': parseFloat(peptide['-10lgP']) || 0,\r\n          };\r\n        });\r\n\r\n        // Step 2: Data Normalization\r\n        const totalArea = mergedData.reduce((sum, item) => sum + item['Area IBIS_DDA_1'], 0); \r\n        const normFactor = totalArea > 0 ? 1000000 / totalArea : 1;\r\n        \r\n        const normalizedData = mergedData.map(item => ({\r\n          ...item,\r\n          'Area IBIS_DDA_1': item['Area IBIS_DDA_1'] * normFactor,\r\n        }));\r\n\r\n        // Step 3: Determine group uniqueness and unique peptides\r\n        const proteinGroups = new Map();\r\n        normalizedData.forEach(d => {\r\n          const group = d['Protein Group'];\r\n          if (!proteinGroups.has(group)) proteinGroups.set(group, new Set());\r\n          proteinGroups.get(group).add(d['Protein Accession']);\r\n        });\r\n\r\n        const uniquePeptides = new Map();\r\n        normalizedData.forEach(d => {\r\n          if (d['Unique'] === 'Y') {\r\n            if (!uniquePeptides.has(d['Protein Accession'])) uniquePeptides.set(d['Protein Accession'], new Set());\r\n            uniquePeptides.get(d['Protein Accession']).add(d.Peptide);\r\n          }\r\n        });\r\n        \r\n        const processedData = normalizedData.map(d => ({\r\n          ...d,\r\n          'Is Protein Group Unique?': proteinGroups.get(d['Protein Group']).size === 1,\r\n          'Unique Peptides List': Array.from(uniquePeptides.get(d['Protein Accession']) || []).join('; '),\r\n          '# Unique Peptides': (uniquePeptides.get(d['Protein Accession']) || []).size,\r\n        }));\r\n\r\n        // Step 4: Select the most reliable protein per group\r\n        const uniqueProteinsMap = new Map();\r\n        processedData.forEach(item => {\r\n          const group = item['Protein Group'];\r\n          if (!uniqueProteinsMap.has(group) || item['-10lgP'] > uniqueProteinsMap.get(group)['-10lgP']) {\r\n            uniqueProteinsMap.set(group, item);\r\n          }\r\n        });\r\n        const uniqueProteins = Array.from(uniqueProteinsMap.values());\r\n        \r\n        // Step 5: Filter by pathogenic variants\r\n        const pathogenicVariants = uniqueProteins.filter(p => \r\n          (p['Protein Accession'] && pathogenicPattern.test(p['Protein Accession'])) &&\r\n          (p.Description && p.Description.includes('PATHOGENIC_VARIANT'))\r\n        );\r\n\r\n        // Step 6: Calculate average abundance and prepare results\r\n        const finalResults = pathogenicVariants.map(variant => {\r\n          const peptidesForVariant = processedData.filter(p => p['Protein Accession'] === variant['Protein Accession']);\r\n          const totalPeptides = peptidesForVariant.length;\r\n          const avgArea = totalPeptides > 0 ? peptidesForVariant.reduce((sum, p) => sum + p['Area IBIS_DDA_1'], 0) / totalPeptides : 0;\r\n          const proteinsInGroup = proteinGroups.get(variant['Protein Group']).size;\r\n\r\n          return {\r\n            'Protein Accession': variant['Protein Accession'],\r\n            'Description': variant.Description,\r\n            'Average Abundance': avgArea,\r\n            '# Total Peptides': totalPeptides,\r\n            '# Unique Peptides': variant['# Unique Peptides'],\r\n            '# Proteins in Group': proteinsInGroup,\r\n            'Is Protein Group Unique?': variant['Is Protein Group Unique?'],\r\n            'Unique Peptides List': variant['Unique Peptides List'],\r\n          };\r\n        }).sort((a, b) => b['Average Abundance'] - a['Average Abundance']);\r\n\r\n\r\n        newProcessedSamples.push({\r\n          id: sampleInput.id,\r\n          name: sampleInput.name.trim(),\r\n          analysisResults: finalResults,\r\n          totalPeptidesCount: peptidesData.length,\r\n          totalProteinsCount: uniqueProteins.length,\r\n          normalizationFactor: normFactor,\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error(`Error processing sample ${sampleInput.name}:`, err);\r\n        setError(`An error occurred while processing sample \"${sampleInput.name}\". Please ensure file format is correct.`);\r\n        hasError = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!hasError) {\r\n      setProcessedSamples(newProcessedSamples);\r\n      // Select all processed samples by default for initial comparison\r\n      setSelectedProcessedSampleIds(newProcessedSamples.map(s => s.id));\r\n      if (newProcessedSamples.length > 0) {\r\n        setError(null); // Clear any previous error if processing was successful\r\n      } else {\r\n        setError(\"No samples could be processed. Ensure all files are loaded and names are correct.\");\r\n      }\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Handler for selecting/deselecting samples for comparison\r\n  const handleSelectSampleForComparison = (id) => {\r\n    setSelectedProcessedSampleIds(prevSelected =>\r\n      prevSelected.includes(id)\r\n        ? prevSelected.filter(sampleId => sampleId !== id)\r\n        : [...prevSelected, id]\r\n    );\r\n  };\r\n\r\n\r\n  // Function to get color for heatmap cell based on abundance\r\n  const getHeatmapColor = (abundance) => {\r\n    if (abundance === 0) return 'rgba(240, 240, 240, 1)'; // Light gray for N/A or zero\r\n    // Scale abundance to a color gradient (e.g., green to dark green or blue to dark blue)\r\n    // Using HSL for easier gradient control: Hue, Saturation, Lightness\r\n    const hue = 210; // Blue hue\r\n    const saturation = 80; // %\r\n    const maxLightness = 95; // Lightest blue for lowest abundance (non-zero)\r\n    const minLightness = 30; // Darkest blue for highest abundance\r\n\r\n    // Calculate lightness based on abundance relative to maxAbundance\r\n    // Ensure maxAbundance is not zero to prevent division by zero\r\n    const scaledAbundance = maxAbundance > 0 ? (abundance / maxAbundance) : 0;\r\n    const lightness = maxLightness - (scaledAbundance * (maxLightness - minLightness));\r\n    \r\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n  };\r\n\r\n\r\n  // Function to export the comparative table to CSV\r\n  const exportComparativeToCsv = () => {\r\n    if (comparativeTableRows.length === 0) {\r\n      setError(\"No comparative table data to export.\");\r\n      return;\r\n    }\r\n    setIsExporting(true);\r\n\r\n    const csvRows = [];\r\n    csvRows.push(comparativeHeaders.join(',')); // Add headers\r\n\r\n    comparativeTableRows.forEach(row => {\r\n      const formattedRow = row.map(cell => {\r\n        // Ensure cells with commas or quotes are properly escaped\r\n        if (typeof cell === 'string' && (cell.includes(',') || cell.includes('\"'))) {\r\n          return `\"${cell.replace(/\"/g, '\"\"')}\"`;\r\n        }\r\n        return cell;\r\n      });\r\n      csvRows.push(formattedRow.join(','));\r\n    });\r\n\r\n    const csvString = csvRows.join('\\n');\r\n    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    if (link.download !== undefined) {\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', 'comparative_biomarker_analysis.csv');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n    } else {\r\n      setError(\"Your browser does not support direct file download.\");\r\n    }\r\n    setIsExporting(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen p-4 sm:p-8 font-sans\">\r\n      <div className=\"max-w-4xl mx-auto bg-white p-6 rounded-3xl shadow-lg\">\r\n        <h1 className=\"text-3xl sm:text-4xl font-extrabold text-blue-700 mb-2\">Multi-Sample Biomarker Analysis</h1>\r\n        <p className=\"text-lg text-gray-600 mb-8\">Load and compare the abundance of pathogenic proteins across different samples.</p>\r\n\r\n        {/* Section to manage sample slots */}\r\n        <div className=\"mb-8 p-6 bg-blue-50 rounded-3xl shadow-inner\">\r\n          <h2 className=\"text-xl font-bold text-blue-800 mb-4\">Manage Samples</h2>\r\n          {sampleInputs.map((sampleSlot, index) => (\r\n            <div key={sampleSlot.id} className=\"mb-6 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\">\r\n              <div className=\"flex justify-between items-center mb-3\">\r\n                <label htmlFor={`sampleName-${sampleSlot.id}`} className=\"block text-base font-medium text-gray-700\">Sample {index + 1}</label>\r\n                {sampleInputs.length > 1 && (\r\n                  <button\r\n                    onClick={() => removeSampleInputSlot(sampleSlot.id)}\r\n                    className=\"text-red-600 hover:text-red-800 text-sm font-semibold\"\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                )}\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                id={`sampleName-${sampleSlot.id}`}\r\n                value={sampleSlot.name}\r\n                onChange={(e) => handleSampleNameChange(sampleSlot.id, e.target.value)}\r\n                placeholder=\"Sample Name (e.g., Control, Treated)\"\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 mb-4\"\r\n              />\r\n              <div className=\"space-y-3\">\r\n                <div className=\"p-2 bg-gray-50 rounded-xl border border-gray-100\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Peptides File (`protein-peptides.csv`)</label>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".csv\"\r\n                    onChange={(e) => handleSampleFileChange(sampleSlot.id, 'peptides', e.target.files[0])} \r\n                    className=\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\r\n                  />\r\n                </div>\r\n                <div className=\"p-2 bg-gray-50 rounded-xl border border-gray-100\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Proteins File (`proteins.csv`)</label>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".csv\"\r\n                    onChange={(e) => handleSampleFileChange(sampleSlot.id, 'proteins', e.target.files[0])} \r\n                    className=\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\r\n                  />\r\n                </div>\r\n                <div className=\"p-2 bg-gray-50 rounded-xl border border-gray-100\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Pathogenic IDs File (`.txt`)</label>\r\n                  <input \r\n                    type=\"file\" \r\n                    accept=\".txt\"\r\n                    onChange={(e) => handleSampleFileChange(sampleSlot.id, 'pathogenic_ids', e.target.files[0])} \r\n                    className=\"w-full text-gray-500 file:mr-3 file:py-1.5 file:px-3 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <button\r\n            onClick={addSampleInputSlot}\r\n            className=\"w-full py-2 px-4 bg-gray-200 text-gray-700 font-semibold rounded-2xl hover:bg-gray-300 transition-colors mb-4\"\r\n          >\r\n            + Add Sample Slot\r\n          </button>\r\n          <button\r\n            onClick={processAllSamples}\r\n            disabled={loading || sampleInputs.every(s => !s.name.trim() && !s.files.peptides)} // Disable if no valid inputs\r\n            className=\"w-full py-3 px-6 bg-blue-600 text-white font-bold rounded-2xl shadow-md hover:bg-blue-700 transition-colors disabled:bg-blue-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\r\n          >\r\n            {loading && (\r\n              <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n              </svg>\r\n            )}\r\n            <span>{loading ? \"Processing Samples...\" : \"Process All Samples\"}</span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Error Message */}\r\n        {error && (\r\n          <div className=\"mt-4 p-4 text-red-700 bg-red-100 rounded-2xl border border-red-200\">\r\n            <p className=\"font-semibold\">Error:</p>\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Sample Selector for Comparison */}\r\n        {processedSamples.length > 0 && (\r\n          <div className=\"mb-8 p-6 bg-gray-50 rounded-3xl shadow-inner\">\r\n            <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Select Samples for Comparison</h2>\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n              {processedSamples.map(sample => (\r\n                <label key={sample.id} className=\"inline-flex items-center p-2 bg-white rounded-xl border border-gray-200 shadow-sm cursor-pointer hover:bg-gray-100 transition-colors\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedProcessedSampleIds.includes(sample.id)}\r\n                    onChange={() => handleSelectSampleForComparison(sample.id)}\r\n                    className=\"form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500\"\r\n                  />\r\n                  <span className=\"ml-2 text-gray-700 font-medium\">{sample.name}</span>\r\n                </label>\r\n              ))}\r\n            </div>\r\n            {selectedProcessedSampleIds.length > 0 && (\r\n              <p className=\"text-sm text-gray-600 mt-4\">Selected samples: {selectedProcessedSampleIds.length}</p>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Visualizations Section */}\r\n        {(visualizationData.length > 0 && isChartLibraryLoaded) && (\r\n          <div className=\"mt-8 p-6 bg-gray-50 rounded-3xl shadow-inner\">\r\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Visualizations</h2>\r\n\r\n            {/* Comparative Bar Chart */}\r\n            <h3 className=\"text-xl font-bold text-gray-700 mb-4\">Comparative Bar Chart (Select a Protein)</h3>\r\n            <div className=\"mb-4\">\r\n              <label htmlFor=\"proteinForChart\" className=\"block text-sm font-medium text-gray-700 mb-1\">Select Protein Accession:</label>\r\n              <select\r\n                id=\"proteinForChart\"\r\n                value={selectedProteinForChart}\r\n                onChange={(e) => setSelectedProteinForChart(e.target.value)}\r\n                className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500\"\r\n                disabled={!allUniqueProteins || allUniqueProteins.length === 0}\r\n              >\r\n                <option value=\"\">-- Select a Protein --</option>\r\n                {allUniqueProteins.map(accession => (\r\n                  <option key={accession} value={accession}>{accession}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            {selectedProteinForChart && (\r\n              <div className=\"mb-8 p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\" style={{ height: '400px', width: '100%' }}>\r\n                <canvas ref={comparativeChartCanvasRef}></canvas>\r\n              </div>\r\n            )}\r\n            {!selectedProteinForChart && (\r\n                <div className=\"mb-8 p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                    <p className=\"font-semibold\">Select a protein from the dropdown above to view its comparative abundance across samples.</p>\r\n                </div>\r\n            )}\r\n\r\n\r\n            {/* Heatmap */}\r\n            <h3 className=\"text-xl font-bold text-gray-700 mb-4 mt-8\">Comparative Abundance Heatmap</h3>\r\n            <div className=\"overflow-x-auto p-4 bg-white rounded-2xl border border-gray-200 shadow-sm\">\r\n                {visualizationData.length > 0 && samplesForComparison.length > 0 ? (\r\n                    <div className=\"inline-block min-w-full\">\r\n                        {/* Heatmap Header (Sample Names) */}\r\n                        <div className=\"flex flex-row sticky top-0 bg-white z-10 border-b border-gray-200\">\r\n                            <div className=\"flex-shrink-0\" style={{ width: '200px', padding: '8px', fontWeight: 'bold' }}>Protein Accession</div>\r\n                            {samplesForComparison.map(sample => (\r\n                                <div key={sample.id} className=\"flex-shrink-0 text-center\" style={{ width: '100px', padding: '8px', fontWeight: 'bold' }}>{sample.name}</div>\r\n                            ))}\r\n                        </div>\r\n                        {/* Heatmap Grid */}\r\n                        {visualizationData.map((proteinRow, rowIndex) => (\r\n                            <div key={rowIndex} className=\"flex flex-row border-b border-gray-100 hover:bg-gray-50\">\r\n                                <div className=\"flex-shrink-0 overflow-hidden whitespace-nowrap overflow-ellipsis\" style={{ width: '200px', padding: '8px', borderRight: '1px solid #e5e7eb' }} title={proteinRow.proteinAccession}>\r\n                                    {proteinRow.proteinAccession}\r\n                                </div>\r\n                                {samplesForComparison.map(sample => (\r\n                                    <div \r\n                                        key={sample.id} \r\n                                        className=\"flex-shrink-0 text-center flex items-center justify-center text-xs font-mono\" \r\n                                        style={{ \r\n                                            width: '100px', \r\n                                            padding: '8px', \r\n                                            backgroundColor: getHeatmapColor(proteinRow.abundancesBySample[sample.name]),\r\n                                            color: proteinRow.abundancesBySample[sample.name] > maxAbundance / 2 ? 'white' : 'black', // Text color for contrast\r\n                                            borderRight: '1px solid #e5e7eb'\r\n                                        }}\r\n                                        title={`Abundance: ${proteinRow.abundancesBySample[sample.name].toFixed(2)}`}\r\n                                    >\r\n                                        {proteinRow.abundancesBySample[sample.name] > 0 ? proteinRow.abundancesBySample[sample.name].toFixed(0) : 'N/A'}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"p-4 text-gray-600 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                        <p className=\"font-semibold\">No data available for heatmap. Process samples and select them for comparison.</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {!visualizationData.length > 0 && processedSamples.length > 0 && (\r\n             <div className=\"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                <p className=\"font-semibold\">Please select samples for comparison to generate visualizations.</p>\r\n            </div>\r\n        )}\r\n        {(processedSamples.length > 0 && !isChartLibraryLoaded) && (\r\n            <div className=\"mt-8 p-4 text-gray-700 bg-gray-100 rounded-2xl border border-gray-200\">\r\n                <p className=\"font-semibold\">Loading chart library... Please wait for visualizations to appear.</p>\r\n            </div>\r\n        )}\r\n\r\n        {/* Comparative Table Section */}\r\n        {comparativeTableRows.length > 0 && (\r\n          <div className=\"mt-8\">\r\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Comparative Abundance Table</h2>\r\n            <p className=\"text-gray-600 mb-4 text-sm italic\">\r\n                Normalized abundances for the selected samples.\r\n            </p>\r\n            <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-4\">\r\n              <button\r\n                onClick={exportComparativeToCsv}\r\n                disabled={isExporting || comparativeTableRows.length === 0}\r\n                className=\"w-full py-3 px-6 bg-green-600 text-white font-bold rounded-2xl shadow-md hover:bg-green-700 transition-colors disabled:bg-green-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\r\n              >\r\n                <span>{isExporting ? \"Exporting...\" : \"Export Comparative Table to Excel (CSV)\"}</span>\r\n              </button>\r\n            </div>\r\n            <div id=\"comparative-results-table\" className=\"overflow-x-auto rounded-xl shadow-inner border border-gray-200\">\r\n              <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    {comparativeHeaders.map((header, index) => (\r\n                      <th key={index} className=\"px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{header}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                  {comparativeTableRows.map((row, rowIndex) => (\r\n                    <tr key={rowIndex} className=\"hover:bg-gray-50 transition-colors\">\r\n                      {row.map((cell, cellIndex) => (\r\n                        <td key={cellIndex} className={`px-4 sm:px-6 py-4 whitespace-normal text-sm ${cellIndex < 2 ? 'font-medium text-gray-900' : 'text-gray-700 font-mono'}`}>{cell}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}